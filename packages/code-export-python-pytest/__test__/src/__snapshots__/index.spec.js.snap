// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Code Export Java JUnit Selenium should export a suite 1`] = `
"# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
import selenium.webdriver.support.wait.WebDriverWait

class TestLogin():
  def setup_method(self, method):
    self.driver = webdriver.Firefox()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit();
  
  def test_validcredentials(self):
    driver.get(\\"http://the-internet.herokuapp.com/login\\")
    driver.set_window_size(1440, 1177)
    driver.find_element(By.ID, \\"username\\").send_keys(\\"tomsmith\\")
    driver.find_element(By.ID, \\"password\\").send_keys(\\"SuperSecretPassword!\\")
    driver.find_element(By.CSS_SELECTOR, \\"#login button\\").click()
    assert driver.find_element(By.CSS_SELECTOR, \\".flash.success\\").text == \\"You logged into a secure area!\\\\\\\\n×\\"
  
  def test_invalidcredentials(self):
    driver.get(\\"http://the-internet.herokuapp.com/login\\")
    driver.set_window_size(1440, 1177)
    driver.find_element(By.ID, \\"username\\").send_keys(\\"blah\\")
    driver.find_element(By.ID, \\"password\\").send_keys(\\"blah\\")
    driver.find_element(By.CSS_SELECTOR, \\"#login button\\").click()
    assert driver.find_element(By.ID, \\"flash\\").text == \\"Your username is invalid!\\\\\\\\n×\\"
  
"
`;

exports[`Code Export Java JUnit Selenium should export a suite that uses control flow commands 1`] = `
"# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
import selenium.webdriver.support.wait.WebDriverWait

class TestControlflow():
  def setup_method(self, method):
    self.driver = webdriver.Firefox()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit();
  
  def test_controlflowif(self):
    vars[\\"myVar\\"] = driver.execute_script(\\"return 'a'\\")
    if driver.execute_script(\\"return (arguments[0] === 'a')\\", vars.[\\"myVar\\"]):
      vars[\\"output\\"] = driver.execute_script(\\"return 'a'\\")
    elif driver.execute_script(\\"return (arguments[0] === 'b')\\", vars.[\\"myVar\\"]):
      vars[\\"output\\"] = driver.execute_script(\\"return 'b'\\")
    else:
      vars[\\"output\\"] = driver.execute_script(\\"return 'c'\\")
    assert(vars[\\"output\\"] == \\"a\\")
  
  def test_controlflowelseif(self):
    vars[\\"myVar\\"] = driver.execute_script(\\"return 'b'\\")
    if driver.execute_script(\\"return (arguments[0] === 'a')\\", vars.[\\"myVar\\"]):
      vars[\\"output\\"] = driver.execute_script(\\"return 'a'\\")
    elif driver.execute_script(\\"return (arguments[0] === 'b')\\", vars.[\\"myVar\\"]):
      vars[\\"output\\"] = driver.execute_script(\\"return 'b'\\")
    else:
      vars[\\"output\\"] = driver.execute_script(\\"return 'c'\\")
    assert(vars[\\"output\\"] == \\"b\\")
  
  def test_controlflowelse(self):
    vars[\\"myVar\\"] = driver.execute_script(\\"return 'c'\\")
    if driver.execute_script(\\"return (arguments[0] === 'a')\\", vars.[\\"myVar\\"]):
      vars[\\"output\\"] = driver.execute_script(\\"return 'a'\\")
    elif driver.execute_script(\\"return (arguments[0] === 'b')\\", vars.[\\"myVar\\"]):
      vars[\\"output\\"] = driver.execute_script(\\"return 'b'\\")
    else:
      vars[\\"output\\"] = driver.execute_script(\\"return 'c'\\")
    assert(vars[\\"output\\"] == \\"c\\")
  
  def test_controlflowdo(self):
    vars[\\"check\\"] = driver.execute_script(\\"return 1\\")
    condition = True
    while condition:
      vars[\\"check\\"] = driver.execute_script(\\"return arguments[0] + 1\\", vars.[\\"check\\"])
    condition = driver.execute_script(\\"return (arguments[0] < 3)\\", vars.[\\"check\\"])
    assert(vars[\\"check\\"] == \\"3\\")
  
  def test_controlflowtimes(self):
    vars[\\"check\\"] = driver.execute_script(\\"return 1\\")
    for i in range(1, 2):
      vars[\\"check\\"] = driver.execute_script(\\"return arguments[0] + 1\\", vars.[\\"check\\"])
    assert(vars[\\"check\\"] == \\"3\\")
  
  def test_controlflowwhile(self):
    vars[\\"check\\"] = driver.execute_script(\\"return 1\\")
    while driver.execute_script(\\"return (arguments[0] < 3)\\", vars.[\\"check\\"]):
      vars[\\"check\\"] = driver.execute_script(\\"return arguments[0] + 1\\", vars.[\\"check\\"])
    assert(vars[\\"check\\"] == \\"3\\")
  
"
`;

exports[`Code Export Java JUnit Selenium should export a suite with a reused test method 1`] = `
"# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
import selenium.webdriver.support.wait.WebDriverWait

class TestLogin():
  def setup_method(self, method):
    self.driver = webdriver.Firefox()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit();
  
  def login(self):
    driver.get(\\"https://the-internet.herokuapp.com/\\")
    driver.find_element(By.LINK_TEXT, \\"Form Authentication\\").click()
    driver.find_element(By.ID, \\"username\\").send_keys(vars[\\"username\\"])
    driver.find_element(By.ID, \\"password\\").send_keys(vars[\\"password\\"])
    driver.find_element(By.CSS_SELECTOR, \\".fa\\").click()
  
  def test_invalidcredentials(self):
    vars[\\"username\\"] = \\"blah\\"
    vars[\\"password\\"] = \\"blah\\"
    self.login()
  
  def test_validcredentials(self):
    vars[\\"username\\"] = \\"tomsmith\\"
    vars[\\"password\\"] = \\"SuperSecretPassword!\\"
    self.login()
  
"
`;

exports[`Code Export Java JUnit Selenium should export a suite with commands that open a new window inside of a reused test method 1`] = `
"# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
import selenium.webdriver.support.wait.WebDriverWait

class TestDefaultSuite():
  def setup_method(self, method):
    self.driver = webdriver.Firefox()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit();
  
  def wait_for_window(timeout = 2000) {
    driver.sleep(timeout)
    wh_now = driver.window_handles
    wh_then = vars[\\"window_handles\\"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then))
  
  def selectwindow(self):
    driver.get(\\"http://the-internet.herokuapp.com/windows\\")
    vars[\\"window_handles\\"] = driver.window_handles
    driver.find_element(By.LINK_TEXT, \\"Click Here\\").click()
    vars[\\"win9425\\"] = self.wait_for_window(2000)
    driver.switch_to.window(vars[\\"win9425\\"])
    assert driver.title == \\"New Window\\"
  
  def test_reuse(self):
    self.selectwindow()
  
"
`;

exports[`Code Export Java JUnit Selenium should export a suite with just one new window util method when there are multiple commands that open a new window 1`] = `
"# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
import selenium.webdriver.support.wait.WebDriverWait

class TestDefaultSuite():
  def setup_method(self, method):
    self.driver = webdriver.Firefox()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit();
  
  def wait_for_window(timeout = 2000) {
    driver.sleep(timeout)
    wh_now = driver.window_handles
    wh_then = vars[\\"window_handles\\"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then))
  
  def selectwindow(self):
    driver.get(\\"http://the-internet.herokuapp.com/windows\\")
    vars[\\"window_handles\\"] = driver.window_handles
    driver.find_element(By.LINK_TEXT, \\"Click Here\\").click()
    vars[\\"win9425\\"] = self.wait_for_window(2000)
    driver.switch_to.window(vars[\\"win9425\\"])
    assert driver.title == \\"New Window\\"
  
  def test_reuse(self):
    self.selectwindow()
  
  def test_selectwindow(self):
    driver.get(\\"http://the-internet.herokuapp.com/windows\\")
    vars[\\"window_handles\\"] = driver.window_handles
    driver.find_element(By.LINK_TEXT, \\"Click Here\\").click()
    vars[\\"win9425\\"] = self.wait_for_window(2000)
    driver.switch_to.window(vars[\\"win9425\\"])
    assert driver.title == \\"New Window\\"
  
"
`;

exports[`Code Export Java JUnit Selenium should export a test 1`] = `
"# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
import selenium.webdriver.support.wait.WebDriverWait

class TestLogin():
  def setup_method(self, method):
    self.driver = webdriver.Firefox()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit();
  
  def test_login(self):
    driver.get(\\"http://the-internet.herokuapp.com/login\\")
    driver.set_window_size(1440, 1177)
    driver.find_element(By.ID, \\"username\\").send_keys(\\"tomsmith\\")
    driver.find_element(By.ID, \\"password\\").send_keys(\\"SuperSecretPassword!\\")
    driver.find_element(By.CSS_SELECTOR, \\"#login button\\").click()
    assert driver.find_element(By.CSS_SELECTOR, \\".flash.success\\").text == \\"You logged into a secure area!\\\\\\\\n×\\"
  
"
`;

exports[`Code Export Java JUnit Selenium should export a test with a reused test method 1`] = `
"# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
import selenium.webdriver.support.wait.WebDriverWait

class TestValidcredentials():
  def setup_method(self, method):
    self.driver = webdriver.Firefox()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit();
  
  def login(self):
    driver.get(\\"https://the-internet.herokuapp.com/\\")
    driver.find_element(By.LINK_TEXT, \\"Form Authentication\\").click()
    driver.find_element(By.ID, \\"username\\").send_keys(vars[\\"username\\"])
    driver.find_element(By.ID, \\"password\\").send_keys(vars[\\"password\\"])
    driver.find_element(By.CSS_SELECTOR, \\".fa\\").click()
  
  def test_validcredentials(self):
    vars[\\"username\\"] = \\"tomsmith\\"
    vars[\\"password\\"] = \\"SuperSecretPassword!\\"
    self.login()
  
"
`;

exports[`Code Export Java JUnit Selenium should export a test with commands that open a new window 1`] = `
"# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
import selenium.webdriver.support.wait.WebDriverWait

class TestSelectwindow():
  def setup_method(self, method):
    self.driver = webdriver.Firefox()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit();
  
  def wait_for_window(timeout = 2000) {
    driver.sleep(timeout)
    wh_now = driver.window_handles
    wh_then = vars[\\"window_handles\\"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then))
  
  def test_selectwindow(self):
    driver.get(\\"http://the-internet.herokuapp.com/\\")
    driver.set_window_size(1260, 1027)
    driver.find_element(By.LINK_TEXT, \\"Multiple Windows\\").click()
    vars[\\"window_handles\\"] = driver.window_handles
    driver.find_element(By.LINK_TEXT, \\"Click Here\\").click()
    vars[\\"win9625\\"] = self.wait_for_window(2000)
    vars[\\"root\\"] = driver.current_window_handle
    driver.switch_to.window(vars[\\"win9625\\"])
    assert driver.title == \\"New Window\\"
    driver.switch_to.window(vars[\\"root\\"])
    assert driver.title == \\"The Internet\\"
  
"
`;
