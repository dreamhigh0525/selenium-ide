// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Code Export Java Selenium should export a suite to JUnit code 1`] = `
"// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
public class Login {
  private WebDriver driver;
  private HashMap<String, Object> vars = new HashMap<String, Object>();
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new FirefoxDriver();
    js = (JavascriptExecutor) driver;
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void validcredentials() {
    driver.get(\\"http://the-internet.herokuapp.com/login\\");
    driver.manage().window().setSize(new Dimension(1440, 1177));
    driver.findElement(By.id(\\"username\\")).sendKeys(\\"tomsmith\\");
    driver.findElement(By.id(\\"password\\")).sendKeys(\\"SuperSecretPassword!\\");
    driver.findElement(By.cssSelector(\\"#login button\\")).click();
    assertThat(driver.findElement(By.cssSelector(\\".flash.success\\")).getText(), is(\\"You logged into a secure area!\\\\\\\\n×\\"));
  }
  @Test
  public void invalidcredentials() {
    driver.get(\\"http://the-internet.herokuapp.com/login\\");
    driver.manage().window().setSize(new Dimension(1440, 1177));
    driver.findElement(By.id(\\"username\\")).sendKeys(\\"blah\\");
    driver.findElement(By.id(\\"password\\")).sendKeys(\\"blah\\");
    driver.findElement(By.cssSelector(\\"#login button\\")).click();
    assertThat(driver.findElement(By.id(\\"flash\\")).getText(), is(\\"Your username is invalid!\\\\\\\\n×\\"));
  }
}
"
`;

exports[`Code Export Java Selenium should export a suite to JUnit code that uses control flow commands 1`] = `
"// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
public class Controlflow {
  private WebDriver driver;
  private HashMap<String, Object> vars = new HashMap<String, Object>();
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new FirefoxDriver();
    js = (JavascriptExecutor) driver;
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void controlflowif() {
    {
      Object result = js.executeScript(\\"return 'a'\\");
      vars.put(\\"myVar\\", result);
    }
    if ((Boolean) js.executeScript(\\"return (arguments[0] === 'a')\\", vars.get(\\"myVar\\"))) {
      {
        Object result = js.executeScript(\\"return 'a'\\");
        vars.put(\\"output\\", result);
      }
    } else if ((Boolean) js.executeScript(\\"return (arguments[0] === 'b')\\", vars.get(\\"myVar\\"))) {
      {
        Object result = js.executeScript(\\"return 'b'\\");
        vars.put(\\"output\\", result);
      }
    } else {
      {
        Object result = js.executeScript(\\"return 'c'\\");
        vars.put(\\"output\\", result);
      }
    }
    assertEquals(vars.get(\\"output\\").toString(), \\"a\\");
  }
  @Test
  public void controlflowelseif() {
    {
      Object result = js.executeScript(\\"return 'b'\\");
      vars.put(\\"myVar\\", result);
    }
    if ((Boolean) js.executeScript(\\"return (arguments[0] === 'a')\\", vars.get(\\"myVar\\"))) {
      {
        Object result = js.executeScript(\\"return 'a'\\");
        vars.put(\\"output\\", result);
      }
    } else if ((Boolean) js.executeScript(\\"return (arguments[0] === 'b')\\", vars.get(\\"myVar\\"))) {
      {
        Object result = js.executeScript(\\"return 'b'\\");
        vars.put(\\"output\\", result);
      }
    } else {
      {
        Object result = js.executeScript(\\"return 'c'\\");
        vars.put(\\"output\\", result);
      }
    }
    assertEquals(vars.get(\\"output\\").toString(), \\"b\\");
  }
  @Test
  public void controlflowelse() {
    {
      Object result = js.executeScript(\\"return 'c'\\");
      vars.put(\\"myVar\\", result);
    }
    if ((Boolean) js.executeScript(\\"return (arguments[0] === 'a')\\", vars.get(\\"myVar\\"))) {
      {
        Object result = js.executeScript(\\"return 'a'\\");
        vars.put(\\"output\\", result);
      }
    } else if ((Boolean) js.executeScript(\\"return (arguments[0] === 'b')\\", vars.get(\\"myVar\\"))) {
      {
        Object result = js.executeScript(\\"return 'b'\\");
        vars.put(\\"output\\", result);
      }
    } else {
      {
        Object result = js.executeScript(\\"return 'c'\\");
        vars.put(\\"output\\", result);
      }
    }
    assertEquals(vars.get(\\"output\\").toString(), \\"c\\");
  }
  @Test
  public void controlflowdo() {
    {
      Object result = js.executeScript(\\"return 1\\");
      vars.put(\\"check\\", result);
    }
    do {
      {
        Object result = js.executeScript(\\"return arguments[0] + 1\\", vars.get(\\"check\\"));
        vars.put(\\"check\\", result);
      }
    } while ((Boolean) js.executeScript(\\"return (arguments[0] < 3)\\", vars.get(\\"check\\")));
    assertEquals(vars.get(\\"check\\").toString(), \\"3\\");
  }
  @Test
  public void controlflowtimes() {
    {
      Object result = js.executeScript(\\"return 1\\");
      vars.put(\\"check\\", result);
    }
    Integer times = 2;
    for(int i = 0; i < times; i++) {
      {
        Object result = js.executeScript(\\"return arguments[0] + 1\\", vars.get(\\"check\\"));
        vars.put(\\"check\\", result);
      }
    }
    assertEquals(vars.get(\\"check\\").toString(), \\"3\\");
  }
  @Test
  public void controlflowwhile() {
    {
      Object result = js.executeScript(\\"return 1\\");
      vars.put(\\"check\\", result);
    }
    while ((Boolean) js.executeScript(\\"return (arguments[0] < 3)\\", vars.get(\\"check\\"))) {
      {
        Object result = js.executeScript(\\"return arguments[0] + 1\\", vars.get(\\"check\\"));
        vars.put(\\"check\\", result);
      }
    }
    assertEquals(vars.get(\\"check\\").toString(), \\"3\\");
  }
}
"
`;

exports[`Code Export Java Selenium should export a suite to JUnit code with reused test method 1`] = `
"// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
public class Login {
  private WebDriver driver;
  private HashMap<String, Object> vars = new HashMap<String, Object>();
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new FirefoxDriver();
    js = (JavascriptExecutor) driver;
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  public void login() {
    driver.get(\\"https://the-internet.herokuapp.com/\\");
    driver.findElement(By.linkText(\\"Form Authentication\\")).click();
    driver.findElement(By.id(\\"username\\")).sendKeys(vars.get(\\"username\\").toString());
    driver.findElement(By.id(\\"password\\")).sendKeys(vars.get(\\"password\\").toString());
    driver.findElement(By.cssSelector(\\".fa\\")).click();
  }
  @Test
  public void invalidcredentials() {
    vars.put(\\"username\\", \\"blah\\");
    vars.put(\\"password\\", \\"blah\\");
    login();
  }
  @Test
  public void validcredentials() {
    vars.put(\\"username\\", \\"tomsmith\\");
    vars.put(\\"password\\", \\"SuperSecretPassword!\\");
    login();
  }
}
"
`;

exports[`Code Export Java Selenium should export a test to JUnit code 1`] = `
"// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
public class Login {
  private WebDriver driver;
  private HashMap<String, Object> vars = new HashMap<String, Object>();
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new FirefoxDriver();
    js = (JavascriptExecutor) driver;
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void login() {
    driver.get(\\"http://the-internet.herokuapp.com/login\\");
    driver.manage().window().setSize(new Dimension(1440, 1177));
    driver.findElement(By.id(\\"username\\")).sendKeys(\\"tomsmith\\");
    driver.findElement(By.id(\\"password\\")).sendKeys(\\"SuperSecretPassword!\\");
    driver.findElement(By.cssSelector(\\"#login button\\")).click();
    assertThat(driver.findElement(By.cssSelector(\\".flash.success\\")).getText(), is(\\"You logged into a secure area!\\\\\\\\n×\\"));
  }
}
"
`;

exports[`Code Export Java Selenium should export a test to JUnit code with reused test method 1`] = `
"// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
public class Validcredentials {
  private WebDriver driver;
  private HashMap<String, Object> vars = new HashMap<String, Object>();
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new FirefoxDriver();
    js = (JavascriptExecutor) driver;
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  public void login() {
    driver.get(\\"https://the-internet.herokuapp.com/\\");
    driver.findElement(By.linkText(\\"Form Authentication\\")).click();
    driver.findElement(By.id(\\"username\\")).sendKeys(vars.get(\\"username\\").toString());
    driver.findElement(By.id(\\"password\\")).sendKeys(vars.get(\\"password\\").toString());
    driver.findElement(By.cssSelector(\\".fa\\")).click();
  }
  @Test
  public void validcredentials() {
    vars.put(\\"username\\", \\"tomsmith\\");
    vars.put(\\"password\\", \\"SuperSecretPassword!\\");
    login();
  }
}
"
`;
