// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Code Export Java JUnit Selenium should export a suite 1`] = `
"// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
public class LoginTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new FirefoxDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void validcredentials() {
    driver.get(\\"http://the-internet.herokuapp.com/login\\");
    driver.manage().window().setSize(new Dimension(1440, 1177));
    driver.findElement(By.id(\\"username\\")).sendKeys(\\"tomsmith\\");
    driver.findElement(By.id(\\"password\\")).sendKeys(\\"SuperSecretPassword!\\");
    driver.findElement(By.cssSelector(\\"#login button\\")).click();
    assertThat(driver.findElement(By.cssSelector(\\".flash.success\\")).getText(), is(\\"You logged into a secure area!\\\\\\\\\\\\\\\\n×\\"));
  }
  @Test
  public void invalidcredentials() {
    driver.get(\\"http://the-internet.herokuapp.com/login\\");
    driver.manage().window().setSize(new Dimension(1440, 1177));
    driver.findElement(By.id(\\"username\\")).sendKeys(\\"blah\\");
    driver.findElement(By.id(\\"password\\")).sendKeys(\\"blah\\");
    driver.findElement(By.cssSelector(\\"#login button\\")).click();
    assertThat(driver.findElement(By.id(\\"flash\\")).getText(), is(\\"Your username is invalid!\\\\\\\\\\\\\\\\n×\\"));
  }
}
"
`;

exports[`Code Export Java JUnit Selenium should export a suite that uses control flow commands 1`] = `
"// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
public class ControlflowTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new FirefoxDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void controlflowif() {
    vars.put(\\"myVar\\", js.executeScript(\\"return 'a'\\"));
    if ((Boolean) js.executeScript(\\"return (arguments[0] === 'a')\\", vars.get(\\"myVar\\"))) {
      vars.put(\\"output\\", js.executeScript(\\"return 'a'\\"));
    } else if ((Boolean) js.executeScript(\\"return (arguments[0] === 'b')\\", vars.get(\\"myVar\\"))) {
      vars.put(\\"output\\", js.executeScript(\\"return 'b'\\"));
    } else {
      vars.put(\\"output\\", js.executeScript(\\"return 'c'\\"));
    }
    assertEquals(vars.get(\\"output\\").toString(), \\"a\\");
  }
  @Test
  public void controlflowelseif() {
    vars.put(\\"myVar\\", js.executeScript(\\"return 'b'\\"));
    if ((Boolean) js.executeScript(\\"return (arguments[0] === 'a')\\", vars.get(\\"myVar\\"))) {
      vars.put(\\"output\\", js.executeScript(\\"return 'a'\\"));
    } else if ((Boolean) js.executeScript(\\"return (arguments[0] === 'b')\\", vars.get(\\"myVar\\"))) {
      vars.put(\\"output\\", js.executeScript(\\"return 'b'\\"));
    } else {
      vars.put(\\"output\\", js.executeScript(\\"return 'c'\\"));
    }
    assertEquals(vars.get(\\"output\\").toString(), \\"b\\");
  }
  @Test
  public void controlflowelse() {
    vars.put(\\"myVar\\", js.executeScript(\\"return 'c'\\"));
    if ((Boolean) js.executeScript(\\"return (arguments[0] === 'a')\\", vars.get(\\"myVar\\"))) {
      vars.put(\\"output\\", js.executeScript(\\"return 'a'\\"));
    } else if ((Boolean) js.executeScript(\\"return (arguments[0] === 'b')\\", vars.get(\\"myVar\\"))) {
      vars.put(\\"output\\", js.executeScript(\\"return 'b'\\"));
    } else {
      vars.put(\\"output\\", js.executeScript(\\"return 'c'\\"));
    }
    assertEquals(vars.get(\\"output\\").toString(), \\"c\\");
  }
  @Test
  public void controlflowdo() {
    vars.put(\\"check\\", js.executeScript(\\"return 1\\"));
    do {
      vars.put(\\"check\\", js.executeScript(\\"return arguments[0] + 1\\", vars.get(\\"check\\")));
    } while ((Boolean) js.executeScript(\\"return (arguments[0] < 3)\\", vars.get(\\"check\\")));
    assertEquals(vars.get(\\"check\\").toString(), \\"3\\");
  }
  @Test
  public void controlflowtimes() {
    vars.put(\\"check\\", js.executeScript(\\"return 1\\"));
    Integer times = 2;
    for(int i = 0; i < times; i++) {
      vars.put(\\"check\\", js.executeScript(\\"return arguments[0] + 1\\", vars.get(\\"check\\")));
    }
    assertEquals(vars.get(\\"check\\").toString(), \\"3\\");
  }
  @Test
  public void controlflowwhile() {
    vars.put(\\"check\\", js.executeScript(\\"return 1\\"));
    while ((Boolean) js.executeScript(\\"return (arguments[0] < 3)\\", vars.get(\\"check\\"))) {
      vars.put(\\"check\\", js.executeScript(\\"return arguments[0] + 1\\", vars.get(\\"check\\")));
    }
    assertEquals(vars.get(\\"check\\").toString(), \\"3\\");
  }
}
"
`;

exports[`Code Export Java JUnit Selenium should export a suite with a reused test method 1`] = `
"// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
public class LoginTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new FirefoxDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  public void login() {
    driver.get(\\"https://the-internet.herokuapp.com/\\");
    driver.findElement(By.linkText(\\"Form Authentication\\")).click();
    driver.findElement(By.id(\\"username\\")).sendKeys(vars.get(\\"username\\").toString());
    driver.findElement(By.id(\\"password\\")).sendKeys(vars.get(\\"password\\").toString());
    driver.findElement(By.cssSelector(\\".fa\\")).click();
  }
  @Test
  public void invalidcredentials() {
    vars.put(\\"username\\", \\"blah\\");
    vars.put(\\"password\\", \\"blah\\");
    login();
  }
  @Test
  public void validcredentials() {
    vars.put(\\"username\\", \\"tomsmith\\");
    vars.put(\\"password\\", \\"SuperSecretPassword!\\");
    login();
  }
}
"
`;

exports[`Code Export Java JUnit Selenium should export a suite with commands that open a new window inside of a reused test method 1`] = `
"// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
public class DefaultSuiteTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new FirefoxDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  public String waitForWindow(int timeout) {
    try {
      Thread.sleep(timeout);
    } catch (InterruptedException e) {
      e.printStackTrace();
    }
    Set<String> whNow = driver.getWindowHandles();
    Set<String> whThen = (Set<String>) vars.get(\\"window_handles\\");
    if (whNow.size() > whThen.size()) {
      whNow.removeAll(whThen);
    }
    return whNow.iterator().next();
  }
  public void selectwindow() {
    driver.get(\\"http://the-internet.herokuapp.com/windows\\");
    vars.put(\\"window_handles\\", driver.getWindowHandles());
    driver.findElement(By.linkText(\\"Click Here\\")).click();
    vars.put(\\"win9425\\", waitForWindow(2000));
    driver.switchTo().window(vars.get(\\"win9425\\").toString());
    assertThat(driver.getTitle(), is(\\"New Window\\"));
  }
  @Test
  public void reuse() {
    selectwindow();
  }
}
"
`;

exports[`Code Export Java JUnit Selenium should export a suite with just one new window util method when there are multiple commands that open a new window 1`] = `
"// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
public class DefaultSuiteTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new FirefoxDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  public String waitForWindow(int timeout) {
    try {
      Thread.sleep(timeout);
    } catch (InterruptedException e) {
      e.printStackTrace();
    }
    Set<String> whNow = driver.getWindowHandles();
    Set<String> whThen = (Set<String>) vars.get(\\"window_handles\\");
    if (whNow.size() > whThen.size()) {
      whNow.removeAll(whThen);
    }
    return whNow.iterator().next();
  }
  public void selectwindow() {
    driver.get(\\"http://the-internet.herokuapp.com/windows\\");
    vars.put(\\"window_handles\\", driver.getWindowHandles());
    driver.findElement(By.linkText(\\"Click Here\\")).click();
    vars.put(\\"win9425\\", waitForWindow(2000));
    driver.switchTo().window(vars.get(\\"win9425\\").toString());
    assertThat(driver.getTitle(), is(\\"New Window\\"));
  }
  @Test
  public void reuse() {
    selectwindow();
  }
  @Test
  public void selectwindow() {
    driver.get(\\"http://the-internet.herokuapp.com/windows\\");
    vars.put(\\"window_handles\\", driver.getWindowHandles());
    driver.findElement(By.linkText(\\"Click Here\\")).click();
    vars.put(\\"win9425\\", waitForWindow(2000));
    driver.switchTo().window(vars.get(\\"win9425\\").toString());
    assertThat(driver.getTitle(), is(\\"New Window\\"));
  }
}
"
`;

exports[`Code Export Java JUnit Selenium should export a test 1`] = `
"// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
public class LoginTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new FirefoxDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void login() {
    driver.get(\\"http://the-internet.herokuapp.com/login\\");
    driver.manage().window().setSize(new Dimension(1440, 1177));
    driver.findElement(By.id(\\"username\\")).sendKeys(\\"tomsmith\\");
    driver.findElement(By.id(\\"password\\")).sendKeys(\\"SuperSecretPassword!\\");
    driver.findElement(By.cssSelector(\\"#login button\\")).click();
    assertThat(driver.findElement(By.cssSelector(\\".flash.success\\")).getText(), is(\\"You logged into a secure area!\\\\\\\\\\\\\\\\n×\\"));
  }
}
"
`;

exports[`Code Export Java JUnit Selenium should export a test with a reused test method 1`] = `
"// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
public class ValidcredentialsTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new FirefoxDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  public void login() {
    driver.get(\\"https://the-internet.herokuapp.com/\\");
    driver.findElement(By.linkText(\\"Form Authentication\\")).click();
    driver.findElement(By.id(\\"username\\")).sendKeys(vars.get(\\"username\\").toString());
    driver.findElement(By.id(\\"password\\")).sendKeys(vars.get(\\"password\\").toString());
    driver.findElement(By.cssSelector(\\".fa\\")).click();
  }
  @Test
  public void validcredentials() {
    vars.put(\\"username\\", \\"tomsmith\\");
    vars.put(\\"password\\", \\"SuperSecretPassword!\\");
    login();
  }
}
"
`;

exports[`Code Export Java JUnit Selenium should export a test with commands that open a new window 1`] = `
"// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
public class SelectwindowTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new FirefoxDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  public String waitForWindow(int timeout) {
    try {
      Thread.sleep(timeout);
    } catch (InterruptedException e) {
      e.printStackTrace();
    }
    Set<String> whNow = driver.getWindowHandles();
    Set<String> whThen = (Set<String>) vars.get(\\"window_handles\\");
    if (whNow.size() > whThen.size()) {
      whNow.removeAll(whThen);
    }
    return whNow.iterator().next();
  }
  @Test
  public void selectwindow() {
    driver.get(\\"http://the-internet.herokuapp.com/\\");
    driver.manage().window().setSize(new Dimension(1260, 1027));
    driver.findElement(By.linkText(\\"Multiple Windows\\")).click();
    vars.put(\\"window_handles\\", driver.getWindowHandles());
    driver.findElement(By.linkText(\\"Click Here\\")).click();
    vars.put(\\"win9625\\", waitForWindow(2000));
    vars.put(\\"root\\", driver.getWindowHandle());
    driver.switchTo().window(vars.get(\\"win9625\\").toString());
    assertThat(driver.getTitle(), is(\\"New Window\\"));
    driver.switchTo().window(vars.get(\\"root\\").toString());
    assertThat(driver.getTitle(), is(\\"The Internet\\"));
  }
}
"
`;
