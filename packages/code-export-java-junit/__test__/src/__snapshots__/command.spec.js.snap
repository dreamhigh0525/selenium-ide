// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`command code emitter should emit 'assert selected label' command 1`] = `
"{
  WebElement element = driver.findElement(By.id(\\"test\\"));
  String value = element.getAttribute(\\"value\\");
  String locator = String.format(\\"option[@value='%s']\\", value);
  String selectedText = element.findElement(By.xpath(locator)).getText();
  assertThat(selectedText, is(\\"test\\"));
}"
`;

exports[`command code emitter should emit 'verify selected label' command 1`] = `
"{
  WebElement element = driver.findElement(By.id(\\"test\\"));
  String value = element.getAttribute(\\"value\\");
  String locator = String.format(\\"option[@value='%s']\\", value);
  String selectedText = element.findElement(By.xpath(locator)).getText();
  assertThat(selectedText, is(\\"test\\"));
}"
`;

exports[`command code emitter should emit \`add selection\` command 1`] = `
"{
  WebElement dropdown = driver.findElement(By.cssSelector(\\"select\\"));
  dropdown.findElement(By.xpath(\\"//option[. = 'A label']\\")).click();
}"
`;

exports[`command code emitter should emit \`answer on visible prompt\` command 1`] = `
"{
  Alert alert = driver.switchTo().alert();
  alert.sendKeys(\\"an answer\\")
  alert.accept();
}"
`;

exports[`command code emitter should emit \`assert alert\` command 1`] = `"assertThat(driver.switchTo().alert().getText(), is(\\"an alert\\"));"`;

exports[`command code emitter should emit \`assert checked\` command 1`] = `"assertTrue(driver.findElement(By.id(\\"check\\")).isSelected());"`;

exports[`command code emitter should emit \`assert confirmation\` command 1`] = `"assertThat(driver.switchTo().alert().getText(), is(\\"a confirmation\\"));"`;

exports[`command code emitter should emit \`assert editable\` command 1`] = `
"{
  WebElement element = driver.findElement(By.id(\\"text\\"));
  Boolean isEditable = element.isEnabled() && element.getAttribute(\\"readonly\\") == null;
  assertTrue(isEditable);
}"
`;

exports[`command code emitter should emit \`assert element not present\` command 1`] = `
"{
  List<WebElement> elements = driver.findElements(By.id(\\"element\\"));
  assert(elements.size() == 0);
}"
`;

exports[`command code emitter should emit \`assert element present\` command 1`] = `
"{
  List<WebElement> elements = driver.findElements(By.id(\\"element\\"));
  assert(elements.size() > 0);
}"
`;

exports[`command code emitter should emit \`assert not checked\` command 1`] = `"assertFalse(driver.findElement(By.id(\\"check\\")).isSelected());"`;

exports[`command code emitter should emit \`assert not editable\` command 1`] = `
"{
  WebElement element = driver.findElement(By.id(\\"text\\"));
  Boolean isEditable = element.isEnabled() && element.getAttribute(\\"readonly\\") == null;
  assertFalse(isEditable);
}"
`;

exports[`command code emitter should emit \`assert not selected value\` command 1`] = `
"{
  String value = driver.findElement(By.id(\\"select\\")).getAttribute(\\"value\\");
  assertThat(value, is(not(\\"test\\")));
}"
`;

exports[`command code emitter should emit \`assert not text\` command 1`] = `"assertThat(driver.findElement(By.id(\\"test\\")).getText(), is(not(\\"text\\")));"`;

exports[`command code emitter should emit \`assert prompt\` command 1`] = `"assertThat(driver.switchTo().alert().getText(), is(\\"a prompt\\"));"`;

exports[`command code emitter should emit \`assert selected value\` command 1`] = `
"{
  String value = driver.findElement(By.id(\\"select\\")).getAttribute(\\"value\\");
  assertThat(value, is(\\"test\\"));
}"
`;

exports[`command code emitter should emit \`assert text\` command 1`] = `"assertThat(driver.findElement(By.id(\\"test\\")).getText(), is(\\"some text that should be here\\"));"`;

exports[`command code emitter should emit \`assert title\` command 1`] = `"assertThat(driver.getTitle(), is(\\"example title\\"));"`;

exports[`command code emitter should emit \`assert value\` command 1`] = `
"{
  String value = driver.findElement(By.id(\\"select\\")).getAttribute(\\"value\\");
  assertThat(value, is(\\"test\\"));
}"
`;

exports[`command code emitter should emit \`assert\` command 1`] = `"assertEquals(vars.get(\\"varrrName\\").toString(), \\"blah\\");"`;

exports[`command code emitter should emit \`check\` command 1`] = `
"{
  WebElement element = driver.findElement(By.id(\\"f\\"));
  if (!element.isSelected()) {
    element.click();
  }
}"
`;

exports[`command code emitter should emit \`choose cancel on visible prompt\` command 1`] = `"driver.switchTo().alert().dismiss();"`;

exports[`command code emitter should emit \`choose ok on visible confirmation\` command 1`] = `"driver.switchTo().alert().accept();"`;

exports[`command code emitter should emit \`click at\` command 1`] = `"driver.findElement(By.linkText(\\"button\\")).click();"`;

exports[`command code emitter should emit \`click\` command 1`] = `"driver.findElement(By.linkText(\\"button\\")).click();"`;

exports[`command code emitter should emit \`close\` command 1`] = `"driver.close();"`;

exports[`command code emitter should emit \`do\` command 1`] = `
Object {
  "body": "do {",
  "endingLevel": 1,
}
`;

exports[`command code emitter should emit \`double click at\` command 1`] = `
"{
  WebElement element = driver.findElement(By.linkText(\\"button\\"));
  Actions builder = new Actions(driver);
  builder.doubleClick(element).perform();
}"
`;

exports[`command code emitter should emit \`double click\` command 1`] = `
"{
  WebElement element = driver.findElement(By.linkText(\\"button\\"));
  Actions builder = new Actions(driver);
  builder.doubleClick(element).perform();
}"
`;

exports[`command code emitter should emit \`drag and drop to object\` command 1`] = `
"{
  WebElement dragged = driver.findElement(By.linkText(\\"dragged\\"));
  WebElement dropped = driver.findElement(By.linkText(\\"dropped\\"));
  Actions builder = new Actions(driver);
  builder.dragAndDrop(dragged, dropped).perform();
}"
`;

exports[`command code emitter should emit \`echo\` command 1`] = `"System.out.println(\\"blah\\");"`;

exports[`command code emitter should emit \`echo\` command with variables 1`] = `"System.out.println(vars.get(\\"blah\\").toString());"`;

exports[`command code emitter should emit \`edit content\` command 1`] = `
"{
  WebElement element = driver.findElement(By.id(\\"contentEditable\\"));
  js.executeScript(\\"if(arguments[0].contentEditable === 'true') {arguments[0].innerText = '<button>test</button>'}\\", element);
}"
`;

exports[`command code emitter should emit \`else if\` command 1`] = `
Object {
  "body": "} else if ((Boolean) js.executeScript(\\"return (true)\\")) {",
  "endingLevel": 1,
}
`;

exports[`command code emitter should emit \`else\` command 1`] = `
Object {
  "body": "} else {",
  "endingLevel": 1,
}
`;

exports[`command code emitter should emit \`end\` command 1`] = `
Object {
  "body": "}",
  "endingLevel": 0,
}
`;

exports[`command code emitter should emit \`execute async script\` command 1`] = `"vars.put(\\"myVar\\", js.executeAsyncScript(\\"var callback = arguments[arguments.length - 1];javascript.then(callback).catch(callback);\\"));"`;

exports[`command code emitter should emit \`execute script\` command 1`] = `"vars.put(\\"myVar\\", js.executeScript(\\"javascript\\"));"`;

exports[`command code emitter should emit \`execute script\` command with return string value 1`] = `"vars.put(\\"myVar\\", js.executeScript(\\"return 'a'\\"));"`;

exports[`command code emitter should emit \`forEach\` command 1`] = `
Object {
  "body": "ArrayList collectionCollection = (ArrayList) vars.get(\\"collection\\");
for (int iIteratorVar = 0; i < collectionCollection.size() - 1; iIteratorVar++) {
  vars.put(\\"iteratorVar\\", collectionCollection.get(i));",
  "endingLevel": 1,
}
`;

exports[`command code emitter should emit \`if\` command 1`] = `
Object {
  "body": "if ((Boolean) js.executeScript(\\"return (true)\\")) {",
  "endingLevel": 1,
}
`;

exports[`command code emitter should emit \`mouse down at\` event 1`] = `
"{
  WebElement element = driver.findElement(By.id(\\"button\\"));
  Actions builder = new Actions(driver);
  builder.moveToElement(element).clickAndHold().perform();
}"
`;

exports[`command code emitter should emit \`mouse down\` command 1`] = `
"{
  WebElement element = driver.findElement(By.id(\\"button\\"));
  Actions builder = new Actions(driver);
  builder.moveToElement(element).clickAndHold().perform();
}"
`;

exports[`command code emitter should emit \`mouse move at\` event 1`] = `
"{
  WebElement element = driver.findElement(By.id(\\"button\\"));
  Actions builder = new Actions(driver);
  builder.moveToElement(element).perform();
}"
`;

exports[`command code emitter should emit \`mouse move\` event 1`] = `
"{
  WebElement element = driver.findElement(By.id(\\"button\\"));
  Actions builder = new Actions(driver);
  builder.moveToElement(element).perform();
}"
`;

exports[`command code emitter should emit \`mouse out\` event 1`] = `
"{
  WebElement element = driver.findElement(By.tagName(\\"body\\"));
  Actions builder = new Actions(driver);
  builder.moveToElement(element, 0, 0).perform();
}"
`;

exports[`command code emitter should emit \`mouse over\` event 1`] = `
"{
  WebElement element = driver.findElement(By.id(\\"button\\"));
  Actions builder = new Actions(driver);
  builder.moveToElement(element).perform();
}"
`;

exports[`command code emitter should emit \`mouse up at\` event 1`] = `
"{
  WebElement element = driver.findElement(By.id(\\"button\\"));
  Actions builder = new Actions(driver);
  builder.moveToElement(element).release().perform();
}"
`;

exports[`command code emitter should emit \`mouse up\` event 1`] = `
"{
  WebElement element = driver.findElement(By.id(\\"button\\"));
  Actions builder = new Actions(driver);
  builder.moveToElement(element).release().perform();
}"
`;

exports[`command code emitter should emit \`open\` with absolute url 1`] = `"driver.get(\\"https://www.seleniumhq.org/\\");"`;

exports[`command code emitter should emit \`pause\` command 1`] = `
"try {
  Thread.sleep(300);
} catch (InterruptedException e) {
  e.printStackTrace();
}"
`;

exports[`command code emitter should emit \`remove selection\` command 1`] = `
"{
  WebElement dropdown = driver.findElement(By.cssSelector(\\"select\\"));
  dropdown.findElement(By.xpath(\\"//option[. = 'A label']\\")).click();
}"
`;

exports[`command code emitter should emit \`repeatIf\` command 1`] = `"} while ((Boolean) js.executeScript(\\"return (true)\\"));"`;

exports[`command code emitter should emit \`run script\` command 1`] = `"js.executeScript(\\"alert('test');alert('Im annoying');\\");"`;

exports[`command code emitter should emit \`run\` command 1`] = `"sometestcase();"`;

exports[`command code emitter should emit \`select frame\` to select the top frame 1`] = `"driver.switchTo().defaultContent();"`;

exports[`command code emitter should emit \`select window\` to select a window by handle 1`] = `"driver.switchTo().window(vars.get(\\"window\\").toString());"`;

exports[`command code emitter should emit \`select window\` to select a window by implicit index 1`] = `
"{
  ArrayList<String> handles = new ArrayList<String>(driver.getWindowHandles());
  driver.switchTo().window(handles.get(12));
}"
`;

exports[`command code emitter should emit \`select window\` to select a window by name 1`] = `"driver.switchTo().window(\\"window\\");"`;

exports[`command code emitter should emit \`select window\` to select a window by the local keyword 1`] = `
"{
  ArrayList<String> handles = new ArrayList<String>(driver.getWindowHandles());
  driver.switchTo().window(handles.get(0));
}"
`;

exports[`command code emitter should emit \`select\` command 1`] = `
"{
  WebElement dropdown = driver.findElement(By.cssSelector(\\"select\\"));
  dropdown.findElement(By.xpath(\\"//option[. = 'A label']\\")).click();
}"
`;

exports[`command code emitter should emit \`send keys\` command 1`] = `"driver.findElement(By.id(\\"input\\")).sendKeys(\\"example input\\");"`;

exports[`command code emitter should emit \`send keys\` command with a key press 1`] = `"driver.findElement(By.id(\\"input\\")).sendKeys(\\"SuperSecretPassword!\\", Keys.ENTER);"`;

exports[`command code emitter should emit \`send keys\` command with a variable input 1`] = `"driver.findElement(By.id(\\"input\\")).sendKeys(vars.get(\\"blah\\").toString());"`;

exports[`command code emitter should emit \`set speed\` 1`] = `"System.out.println(\\"\`set speed\` is a no-op in code export, use \`pause\` instead\\");"`;

exports[`command code emitter should emit \`setWindowSize\` 1`] = `"driver.manage().window().setSize(new Dimension(1440, 1177));"`;

exports[`command code emitter should emit \`store attribute\` command 1`] = `
"{
  WebElement element = driver.findElement(By.xpath(\\"button[3]\\"));
  String attribute = element.getAttribute(\\"id\\");
  vars.put(\\"myVar\\", attribute);
}"
`;

exports[`command code emitter should emit \`store text\` command 1`] = `"vars.put(\\"myVar\\", driver.findElement(By.id(\\"someElement\\")).getText());"`;

exports[`command code emitter should emit \`store title\` command 1`] = `"vars.put(\\"myVar\\", driver.getTitle());"`;

exports[`command code emitter should emit \`store value\` command 1`] = `"vars.put(\\"myVar\\", driver.findElement(By.id(\\"someElement\\")).getAttribute(\\"value\\"));"`;

exports[`command code emitter should emit \`store window handle\` command 1`] = `"vars.put(\\"windowName\\", driver.getWindowHandle());"`;

exports[`command code emitter should emit \`store xpath count\` command 1`] = `"vars.put(\\"myVar\\", driver.findElements(By.xpath(\\"button\\")).size());"`;

exports[`command code emitter should emit \`store\` command 1`] = `"vars.put(\\"myVar\\", \\"some value\\");"`;

exports[`command code emitter should emit \`submit\` command 1`] = `"throw new Error(\\"\`submit\` is not a supported command in Selenium WebDriver. Please re-record the step in the IDE.\\");"`;

exports[`command code emitter should emit \`times\` command 1`] = `
Object {
  "body": "Integer times = 5;
for(int i = 0; i < times; i++) {",
  "endingLevel": 1,
}
`;

exports[`command code emitter should emit \`type\` command 1`] = `"driver.findElement(By.id(\\"input\\")).sendKeys(\\"example input\\");"`;

exports[`command code emitter should emit \`uncheck\` command 1`] = `
"{
  WebElement element = driver.findElement(By.id(\\"f\\"));
  if (element.isSelected()) {
    element.click();
  }
}"
`;

exports[`command code emitter should emit \`verify checked\` command 1`] = `"assertTrue(driver.findElement(By.id(\\"check\\")).isSelected());"`;

exports[`command code emitter should emit \`verify editable\` command 1`] = `
"{
  WebElement element = driver.findElement(By.id(\\"text\\"));
  Boolean isEditable = element.isEnabled() && element.getAttribute(\\"readonly\\") == null;
  assertTrue(isEditable);
}"
`;

exports[`command code emitter should emit \`verify element not present\` command 1`] = `
"{
  List<WebElement> elements = driver.findElements(By.id(\\"element\\"));
  assert(elements.size() == 0);
}"
`;

exports[`command code emitter should emit \`verify element present\` command 1`] = `
"{
  List<WebElement> elements = driver.findElements(By.id(\\"element\\"));
  assert(elements.size() > 0);
}"
`;

exports[`command code emitter should emit \`verify not checked\` command 1`] = `"assertFalse(driver.findElement(By.id(\\"check\\")).isSelected());"`;

exports[`command code emitter should emit \`verify not editable\` command 1`] = `
"{
  WebElement element = driver.findElement(By.id(\\"text\\"));
  Boolean isEditable = element.isEnabled() && element.getAttribute(\\"readonly\\") == null;
  assertFalse(isEditable);
}"
`;

exports[`command code emitter should emit \`verify not selected value\` command 1`] = `
"{
  String value = driver.findElement(By.id(\\"select\\")).getAttribute(\\"value\\");
  assertThat(value, is(not(\\"test\\")));
}"
`;

exports[`command code emitter should emit \`verify not text\` command 1`] = `"assertThat(driver.findElement(By.id(\\"test\\")).getText(), is(not(\\"text\\")));"`;

exports[`command code emitter should emit \`verify selected value\` command 1`] = `
"{
  String value = driver.findElement(By.id(\\"select\\")).getAttribute(\\"value\\");
  assertThat(value, is(\\"test\\"));
}"
`;

exports[`command code emitter should emit \`verify text\` command 1`] = `"assertThat(driver.findElement(By.id(\\"test\\")).getText(), is(\\"some text that should be here\\"));"`;

exports[`command code emitter should emit \`verify title\` command 1`] = `"assertThat(driver.getTitle(), is(\\"example title\\"));"`;

exports[`command code emitter should emit \`verify value\` command 1`] = `
"{
  String value = driver.findElement(By.id(\\"select\\")).getAttribute(\\"value\\");
  assertThat(value, is(\\"test\\"));
}"
`;

exports[`command code emitter should emit \`verify\` command 1`] = `"assertEquals(vars.get(\\"varrrName\\").toString(), \\"blah\\");"`;

exports[`command code emitter should emit \`waitForElementEditable\` command 1`] = `
"{
  WebDriverWait wait = new WebDriverWait(driver, 5);
  wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(\\"#blah\\")));
}"
`;

exports[`command code emitter should emit \`waitForElementNotEditable\` command 1`] = `
"{
  WebDriverWait wait = new WebDriverWait(driver, 5);
  wait.until(ExpectedConditions.not(ExpectedConditions.elementToBeClickable(By.cssSelector(\\"#blah\\"))));
}"
`;

exports[`command code emitter should emit \`waitForElementNotPresent\` command 1`] = `
"{
  WebDriverWait wait = new WebDriverWait(driver, 5);
  WebElement element = driver.findElement(By.cssSelector(\\"#blah\\"));
  wait.until(ExpectedConditions.stalenessOf(element));
}"
`;

exports[`command code emitter should emit \`waitForElementNotVisible\` command 1`] = `
"{
  WebDriverWait wait = new WebDriverWait(driver, 5);
  wait.until(ExpectedConditions.invisibilityOfElementLocated(By.cssSelector(\\"#blah\\")));
}"
`;

exports[`command code emitter should emit \`waitForElementPresent\` command 1`] = `
"{
  WebDriverWait wait = new WebDriverWait(driver, 5);
  wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(\\"#blah\\")));
}"
`;

exports[`command code emitter should emit \`waitForElementVisible\` command 1`] = `
"{
  WebDriverWait wait = new WebDriverWait(driver, 5);
  wait.until(ExpectedConditions.visibilityOfElementLocated(By.cssSelector(\\"#blah\\")));
}"
`;

exports[`command code emitter should emit \`waitForText\` command 1`] = `
"{
  WebDriverWait wait = new WebDriverWait(driver, 30);
  wait.until(ExpectedConditions.textToBe(By.cssSelector(\\"#blah\\"), \\"text\\"));
}"
`;

exports[`command code emitter should emit \`while\` command 1`] = `
Object {
  "body": "while ((Boolean) js.executeScript(\\"return (true)\\")) {",
  "endingLevel": 1,
}
`;

exports[`command code emitter should emit new window handling, if command opens a new window 1`] = `
"vars.put(\\"window_handles\\", driver.getWindowHandles());
driver.findElement(By.cssSelector(\\"button\\")).click();
vars.put(\\"newWin\\", waitForWindow(2000));"
`;

exports[`command code emitter should skip playback supported commands, that are not supported in webdriver 1`] = `""`;

exports[`command code emitter should skip playback supported commands, that are not supported in webdriver 2`] = `""`;

exports[`command code emitter should skip playback supported commands, that are not supported in webdriver 3`] = `""`;

exports[`command code emitter should skip playback supported commands, that are not supported in webdriver 4`] = `""`;
