// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Code Export Java JUnit Selenium should export a suite 1`] = `
"// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')

describe('login', function() {
  let driver
  let vars
  beforeEach(async function() {
    driver = await new Builder().forBrowser('firefox').build()
    vars = {}
  })
  afterEach(async function() {
    await driver.quit();
  })
  it('validcredentials', async function() {
    await driver.get(\\"http://the-internet.herokuapp.com/login\\")
    await driver.setRect(1440, 1177)
    await driver.findElement(By.id(\\"username\\")).sendKeys(\\"tomsmith\\")
    await driver.findElement(By.id(\\"password\\")).sendKeys(\\"SuperSecretPassword!\\")
    await driver.findElement(By.css(\\"#login button\\")).click()
    assert(await driver.findElement(By.css(\\".flash.success\\")).getText() == \\"You logged into a secure area!\\\\\\\\n×\\")
  })
  it('invalidcredentials', async function() {
    await driver.get(\\"http://the-internet.herokuapp.com/login\\")
    await driver.setRect(1440, 1177)
    await driver.findElement(By.id(\\"username\\")).sendKeys(\\"blah\\")
    await driver.findElement(By.id(\\"password\\")).sendKeys(\\"blah\\")
    await driver.findElement(By.css(\\"#login button\\")).click()
    assert(await driver.findElement(By.id(\\"flash\\")).getText() == \\"Your username is invalid!\\\\\\\\n×\\")
  })
})
"
`;

exports[`Code Export Java JUnit Selenium should export a suite that uses control flow commands 1`] = `
"// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')

describe('controlflow', function() {
  let driver
  let vars
  beforeEach(async function() {
    driver = await new Builder().forBrowser('firefox').build()
    vars = {}
  })
  afterEach(async function() {
    await driver.quit();
  })
  it('controlflowif', async function() {
    vars[\\"myVar\\"] = await driver.executeScript(\\"return 'a'\\")
    if (!!await driver.executeScript(\\"return (arguments[0] === 'a')\\", vars[\\"myVar\\"])) {
      vars[\\"output\\"] = await driver.executeScript(\\"return 'a'\\")
    } else if (!!await driver.executeScript(\\"return (arguments[0] === 'b')\\", vars[\\"myVar\\"])) {
      vars[\\"output\\"] = await driver.executeScript(\\"return 'b'\\")
    } else {
      vars[\\"output\\"] = await driver.executeScript(\\"return 'c'\\")
    }
    assert(vars[\\"output\\"] == \\"a\\")
  })
  it('controlflowelseif', async function() {
    vars[\\"myVar\\"] = await driver.executeScript(\\"return 'b'\\")
    if (!!await driver.executeScript(\\"return (arguments[0] === 'a')\\", vars[\\"myVar\\"])) {
      vars[\\"output\\"] = await driver.executeScript(\\"return 'a'\\")
    } else if (!!await driver.executeScript(\\"return (arguments[0] === 'b')\\", vars[\\"myVar\\"])) {
      vars[\\"output\\"] = await driver.executeScript(\\"return 'b'\\")
    } else {
      vars[\\"output\\"] = await driver.executeScript(\\"return 'c'\\")
    }
    assert(vars[\\"output\\"] == \\"b\\")
  })
  it('controlflowelse', async function() {
    vars[\\"myVar\\"] = await driver.executeScript(\\"return 'c'\\")
    if (!!await driver.executeScript(\\"return (arguments[0] === 'a')\\", vars[\\"myVar\\"])) {
      vars[\\"output\\"] = await driver.executeScript(\\"return 'a'\\")
    } else if (!!await driver.executeScript(\\"return (arguments[0] === 'b')\\", vars[\\"myVar\\"])) {
      vars[\\"output\\"] = await driver.executeScript(\\"return 'b'\\")
    } else {
      vars[\\"output\\"] = await driver.executeScript(\\"return 'c'\\")
    }
    assert(vars[\\"output\\"] == \\"c\\")
  })
  it('controlflowdo', async function() {
    vars[\\"check\\"] = await driver.executeScript(\\"return 1\\")
    do {
      vars[\\"check\\"] = await driver.executeScript(\\"return arguments[0] + 1\\", vars[\\"check\\"])
    } while(!!await driver.executeScript(\\"return (arguments[0] < 3)\\", vars[\\"check\\"]))
    assert(vars[\\"check\\"] == \\"3\\")
  })
  it('controlflowtimes', async function() {
    vars[\\"check\\"] = await driver.executeScript(\\"return 1\\")
    const times = 2
    for(let i = 0; i < times; i++) {
      vars[\\"check\\"] = await driver.executeScript(\\"return arguments[0] + 1\\", vars[\\"check\\"])
    }
    assert(vars[\\"check\\"] == \\"3\\")
  })
  it('controlflowwhile', async function() {
    vars[\\"check\\"] = await driver.executeScript(\\"return 1\\")
    while(!!await driver.executeScript(\\"return (arguments[0] < 3)\\", vars[\\"check\\"])) {
      vars[\\"check\\"] = await driver.executeScript(\\"return arguments[0] + 1\\", vars[\\"check\\"])
    }
    assert(vars[\\"check\\"] == \\"3\\")
  })
})
"
`;

exports[`Code Export Java JUnit Selenium should export a suite with a reused test method 1`] = `
"# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys

class TestLogin():
  def setup_method(self, method):
    self.driver = webdriver.Firefox()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit();
  
  def login(self):
    self.driver.get(\\"https://the-internet.herokuapp.com/\\")
    self.driver.find_element(By.LINK_TEXT, \\"Form Authentication\\").click()
    self.driver.find_element(By.ID, \\"username\\").send_keys(self.vars[\\"username\\"])
    self.driver.find_element(By.ID, \\"password\\").send_keys(self.vars[\\"password\\"])
    self.driver.find_element(By.CSS_SELECTOR, \\".fa\\").click()
  
  def test_invalidcredentials(self):
    self.vars[\\"username\\"] = \\"blah\\"
    self.vars[\\"password\\"] = \\"blah\\"
    self.login()
  
  def test_validcredentials(self):
    self.vars[\\"username\\"] = \\"tomsmith\\"
    self.vars[\\"password\\"] = \\"SuperSecretPassword!\\"
    self.login()
  
"
`;

exports[`Code Export Java JUnit Selenium should export a suite with commands that open a new window inside of a reused test method 1`] = `
"# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys

class TestDefaultSuite():
  def setup_method(self, method):
    self.driver = webdriver.Firefox()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit();
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.driver.window_handles
    wh_then = self.vars[\\"window_handles\\"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()
  
  def selectwindow(self):
    self.driver.get(\\"http://the-internet.herokuapp.com/windows\\")
    self.vars[\\"window_handles\\"] = self.driver.window_handles
    self.driver.find_element(By.LINK_TEXT, \\"Click Here\\").click()
    self.vars[\\"win9425\\"] = self.wait_for_window(2000)
    self.driver.switch_to.window(self.vars[\\"win9425\\"])
    assert self.driver.title == \\"New Window\\"
  
  def test_reuse(self):
    self.selectwindow()
  
"
`;

exports[`Code Export Java JUnit Selenium should export a suite with just one new window util method when there are multiple commands that open a new window 1`] = `
"# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys

class TestDefaultSuite():
  def setup_method(self, method):
    self.driver = webdriver.Firefox()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit();
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.driver.window_handles
    wh_then = self.vars[\\"window_handles\\"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()
  
  def selectwindow(self):
    self.driver.get(\\"http://the-internet.herokuapp.com/windows\\")
    self.vars[\\"window_handles\\"] = self.driver.window_handles
    self.driver.find_element(By.LINK_TEXT, \\"Click Here\\").click()
    self.vars[\\"win9425\\"] = self.wait_for_window(2000)
    self.driver.switch_to.window(self.vars[\\"win9425\\"])
    assert self.driver.title == \\"New Window\\"
  
  def test_reuse(self):
    self.selectwindow()
  
  def test_selectwindow(self):
    self.driver.get(\\"http://the-internet.herokuapp.com/windows\\")
    self.vars[\\"window_handles\\"] = self.driver.window_handles
    self.driver.find_element(By.LINK_TEXT, \\"Click Here\\").click()
    self.vars[\\"win9425\\"] = self.wait_for_window(2000)
    self.driver.switch_to.window(self.vars[\\"win9425\\"])
    assert self.driver.title == \\"New Window\\"
  
"
`;

exports[`Code Export Java JUnit Selenium should export a test 1`] = `
"// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')

describe('login', function() {
  let driver
  let vars
  beforeEach(async function() {
    driver = await new Builder().forBrowser('firefox').build()
    vars = {}
  })
  afterEach(async function() {
    await driver.quit();
  })
  it('login', async function() {
    await driver.get(\\"http://the-internet.herokuapp.com/login\\")
    await driver.setRect(1440, 1177)
    await driver.findElement(By.id(\\"username\\")).sendKeys(\\"tomsmith\\")
    await driver.findElement(By.id(\\"password\\")).sendKeys(\\"SuperSecretPassword!\\")
    await driver.findElement(By.css(\\"#login button\\")).click()
    assert(await driver.findElement(By.css(\\".flash.success\\")).getText() == \\"You logged into a secure area!\\\\\\\\n×\\")
  })
})
"
`;

exports[`Code Export Java JUnit Selenium should export a test with a reused test method 1`] = `
"# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys

class TestValidcredentials():
  def setup_method(self, method):
    self.driver = webdriver.Firefox()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit();
  
  def login(self):
    self.driver.get(\\"https://the-internet.herokuapp.com/\\")
    self.driver.find_element(By.LINK_TEXT, \\"Form Authentication\\").click()
    self.driver.find_element(By.ID, \\"username\\").send_keys(self.vars[\\"username\\"])
    self.driver.find_element(By.ID, \\"password\\").send_keys(self.vars[\\"password\\"])
    self.driver.find_element(By.CSS_SELECTOR, \\".fa\\").click()
  
  def test_validcredentials(self):
    self.vars[\\"username\\"] = \\"tomsmith\\"
    self.vars[\\"password\\"] = \\"SuperSecretPassword!\\"
    self.login()
  
"
`;

exports[`Code Export Java JUnit Selenium should export a test with commands that open a new window 1`] = `
"# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys

class TestSelectwindow():
  def setup_method(self, method):
    self.driver = webdriver.Firefox()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit();
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.driver.window_handles
    wh_then = self.vars[\\"window_handles\\"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()
  
  def test_selectwindow(self):
    self.driver.get(\\"http://the-internet.herokuapp.com/\\")
    self.driver.set_window_size(1260, 1027)
    self.driver.find_element(By.LINK_TEXT, \\"Multiple Windows\\").click()
    self.vars[\\"window_handles\\"] = self.driver.window_handles
    self.driver.find_element(By.LINK_TEXT, \\"Click Here\\").click()
    self.vars[\\"win9625\\"] = self.wait_for_window(2000)
    self.vars[\\"root\\"] = self.driver.current_window_handle
    self.driver.switch_to.window(self.vars[\\"win9625\\"])
    assert self.driver.title == \\"New Window\\"
    self.driver.switch_to.window(self.vars[\\"root\\"])
    assert self.driver.title == \\"The Internet\\"
  
"
`;
