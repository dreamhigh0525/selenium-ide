// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Code Export C# xUnit Selenium should export a suite 1`] = `
"// Generated by Selenium IDE
using System;
using System.Collections.Generic;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using Xunit;
public class LoginTest {
  private WebDriver driver;
  private IDictionary<String, Object> vars;
  IJavaScriptExecutor js;
  

  public void setUp() {
    driver = new FirefoxDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  public void tearDown() {
    driver.Quit();
    driver.Dispose();
  }
  [Fact]
  public void validcredentials() {
    driver.Url = \\"http://the-internet.herokuapp.com/login\\";
    driver.Manage().Window.Size=new System.Drawing.Size(1440, 1177);
    driver.FindElement(By.Id(\\"username\\")).SendKeys(\\"tomsmith\\");
    driver.FindElement(By.Id(\\"password\\")).SendKeys(\\"SuperSecretPassword!\\");
    Assert.Equals(driver.FindElement(By.CssSelector(\\".flash.success\\")).Text, is(\\"You logged into a secure area!\\\\\\\\\\\\\\\\n×\\"));
  }
  [Fact]
  public void invalidcredentials() {
    driver.Url = \\"http://the-internet.herokuapp.com/login\\";
    driver.Manage().Window.Size=new System.Drawing.Size(1440, 1177);
    driver.FindElement(By.Id(\\"username\\")).SendKeys(\\"blah\\");
    driver.FindElement(By.Id(\\"password\\")).SendKeys(\\"blah\\");
    Assert.Equals(driver.FindElement(By.Id(\\"flash\\")).Text, is(\\"Your username is invalid!\\\\\\\\\\\\\\\\n×\\"));
  }
}
"
`;

exports[`Code Export C# xUnit Selenium should export a suite that uses control flow commands 1`] = `
"// Generated by Selenium IDE
using System;
using System.Collections.Generic;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using Xunit;
public class ControlflowTest {
  private WebDriver driver;
  private IDictionary<String, Object> vars;
  IJavaScriptExecutor js;
  

  public void setUp() {
    driver = new FirefoxDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  public void tearDown() {
    driver.Quit();
    driver.Dispose();
  }
  [Fact]
  public void controlflowif() {
    this.vars[\\"myVar\\"] = js.executeScript(\\"return 'a'\\")
    if ((Boolean) js.executeScript(\\"return (arguments[0] === 'a')\\", this.vars[\\"myVar\\"])) {
      this.vars[\\"output\\"] = js.executeScript(\\"return 'a'\\")
    } else if ((Boolean) js.executeScript(\\"return (arguments[0] === 'b')\\", this.vars[\\"myVar\\"])) {
      this.vars[\\"output\\"] = js.executeScript(\\"return 'b'\\")
    } else {
      this.vars[\\"output\\"] = js.executeScript(\\"return 'c'\\")
    }
    Assert.Equals(this.vars[\\"output\\"].ToString(), \\"a\\");
  }
  [Fact]
  public void controlflowelseif() {
    this.vars[\\"myVar\\"] = js.executeScript(\\"return 'b'\\")
    if ((Boolean) js.executeScript(\\"return (arguments[0] === 'a')\\", this.vars[\\"myVar\\"])) {
      this.vars[\\"output\\"] = js.executeScript(\\"return 'a'\\")
    } else if ((Boolean) js.executeScript(\\"return (arguments[0] === 'b')\\", this.vars[\\"myVar\\"])) {
      this.vars[\\"output\\"] = js.executeScript(\\"return 'b'\\")
    } else {
      this.vars[\\"output\\"] = js.executeScript(\\"return 'c'\\")
    }
    Assert.Equals(this.vars[\\"output\\"].ToString(), \\"b\\");
  }
  [Fact]
  public void controlflowelse() {
    this.vars[\\"myVar\\"] = js.executeScript(\\"return 'c'\\")
    if ((Boolean) js.executeScript(\\"return (arguments[0] === 'a')\\", this.vars[\\"myVar\\"])) {
      this.vars[\\"output\\"] = js.executeScript(\\"return 'a'\\")
    } else if ((Boolean) js.executeScript(\\"return (arguments[0] === 'b')\\", this.vars[\\"myVar\\"])) {
      this.vars[\\"output\\"] = js.executeScript(\\"return 'b'\\")
    } else {
      this.vars[\\"output\\"] = js.executeScript(\\"return 'c'\\")
    }
    Assert.Equals(this.vars[\\"output\\"].ToString(), \\"c\\");
  }
  [Fact]
  public void controlflowdo() {
    this.vars[\\"check\\"] = js.executeScript(\\"return 1\\")
    do {
      this.vars[\\"check\\"] = js.executeScript(\\"return arguments[0] + 1\\", this.vars[\\"check\\"])
    } while ((Boolean) js.executeScript(\\"return (arguments[0] < 3)\\", this.vars[\\"check\\"]));
    Assert.Equals(this.vars[\\"check\\"].ToString(), \\"3\\");
  }
  [Fact]
  public void controlflowtimes() {
    this.vars[\\"check\\"] = js.executeScript(\\"return 1\\")
    Integer times = 2;
    for(int i = 0; i < times; i++) {
      this.vars[\\"check\\"] = js.executeScript(\\"return arguments[0] + 1\\", this.vars[\\"check\\"])
    }
    Assert.Equals(this.vars[\\"check\\"].ToString(), \\"3\\");
  }
  [Fact]
  public void controlflowwhile() {
    this.vars[\\"check\\"] = js.executeScript(\\"return 1\\")
    while ((Boolean) js.executeScript(\\"return (arguments[0] < 3)\\", this.vars[\\"check\\"])) {
      this.vars[\\"check\\"] = js.executeScript(\\"return arguments[0] + 1\\", this.vars[\\"check\\"])
    }
    Assert.Equals(this.vars[\\"check\\"].ToString(), \\"3\\");
  }
}
"
`;

exports[`Code Export C# xUnit Selenium should export a suite with a reused test method 1`] = `
"// Generated by Selenium IDE
using System;
using System.Collections.Generic;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using Xunit;
public class LoginTest {
  private WebDriver driver;
  private IDictionary<String, Object> vars;
  IJavaScriptExecutor js;
  

  public void setUp() {
    driver = new FirefoxDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  public void tearDown() {
    driver.Quit();
    driver.Dispose();
  }
  public void login() {
    driver.Url = \\"https://the-internet.herokuapp.com/\\";
    
    driver.FindElement(By.Id(\\"username\\")).SendKeys(this.vars[\\"username\\"].ToString());
    driver.FindElement(By.Id(\\"password\\")).SendKeys(this.vars[\\"password\\"].ToString());
    
  }
  [Fact]
  public void invalidcredentials() {
    this.vars[\\"username\\"] = \\"blah\\"
    this.vars[\\"password\\"] = \\"blah\\"
    login();
  }
  [Fact]
  public void validcredentials() {
    this.vars[\\"username\\"] = \\"tomsmith\\"
    this.vars[\\"password\\"] = \\"SuperSecretPassword!\\"
    login();
  }
}
"
`;

exports[`Code Export C# xUnit Selenium should export a suite with commands that open a new window inside of a reused test method 1`] = `
"// Generated by Selenium IDE
using System;
using System.Collections.Generic;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using Xunit;
public class DefaultSuiteTest {
  private WebDriver driver;
  private IDictionary<String, Object> vars;
  IJavaScriptExecutor js;
  

  public void setUp() {
    driver = new FirefoxDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  public void tearDown() {
    driver.Quit();
    driver.Dispose();
  }
  public String waitForWindow(int timeout) {
    Thread.Sleep(timeout);
    Console.WriteLine(\\"Main thread exits.\\");
    var whNow = driver.WindowHandles;
    var whThen = this.vars[\\"WindowHandles\\"];
    if (whNow.Count > whThen.Count) {
      whNow.RemoveAll(whThen);
    }
    return whNow.GetEnumerator().MoveNext();
  }
  public void selectwindow() {
    driver.Url = \\"http://the-internet.herokuapp.com/windows\\";
    
    driver.SwitchTo().Window(this.vars[\\"win9425\\"].ToString());
    Assert.Equals(driver.Title, is(\\"New Window\\"));
  }
  [Fact]
  public void reuse() {
    selectwindow();
  }
}
"
`;

exports[`Code Export C# xUnit Selenium should export a suite with just one new window util method when there are multiple commands that open a new window 1`] = `
"// Generated by Selenium IDE
using System;
using System.Collections.Generic;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using Xunit;
public class DefaultSuiteTest {
  private WebDriver driver;
  private IDictionary<String, Object> vars;
  IJavaScriptExecutor js;
  

  public void setUp() {
    driver = new FirefoxDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  public void tearDown() {
    driver.Quit();
    driver.Dispose();
  }
  public String waitForWindow(int timeout) {
    Thread.Sleep(timeout);
    Console.WriteLine(\\"Main thread exits.\\");
    var whNow = driver.WindowHandles;
    var whThen = this.vars[\\"WindowHandles\\"];
    if (whNow.Count > whThen.Count) {
      whNow.RemoveAll(whThen);
    }
    return whNow.GetEnumerator().MoveNext();
  }
  public void selectwindow() {
    driver.Url = \\"http://the-internet.herokuapp.com/windows\\";
    
    driver.SwitchTo().Window(this.vars[\\"win9425\\"].ToString());
    Assert.Equals(driver.Title, is(\\"New Window\\"));
  }
  [Fact]
  public void reuse() {
    selectwindow();
  }
  [Fact]
  public void selectwindow() {
    driver.Url = \\"http://the-internet.herokuapp.com/windows\\";
    driver.SwitchTo().Window(this.vars[\\"win9425\\"].ToString());
    Assert.Equals(driver.Title, is(\\"New Window\\"));
  }
}
"
`;

exports[`Code Export C# xUnit Selenium should export a test 1`] = `
"// Generated by Selenium IDE
using System;
using System.Collections.Generic;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using Xunit;
public class LoginTest {
  private WebDriver driver;
  private IDictionary<String, Object> vars;
  IJavaScriptExecutor js;
  

  public void setUp() {
    driver = new FirefoxDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  public void tearDown() {
    driver.Quit();
    driver.Dispose();
  }
  [Fact]
  public void login() {
    driver.Url = \\"http://the-internet.herokuapp.com/login\\";
    driver.Manage().Window.Size=new System.Drawing.Size(1440, 1177);
    driver.FindElement(By.Id(\\"username\\")).SendKeys(\\"tomsmith\\");
    driver.FindElement(By.Id(\\"password\\")).SendKeys(\\"SuperSecretPassword!\\");
    Assert.Equals(driver.FindElement(By.CssSelector(\\".flash.success\\")).Text, is(\\"You logged into a secure area!\\\\\\\\\\\\\\\\n×\\"));
  }
}
"
`;

exports[`Code Export C# xUnit Selenium should export a test with a reused test method 1`] = `
"// Generated by Selenium IDE
using System;
using System.Collections.Generic;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using Xunit;
public class ValidcredentialsTest {
  private WebDriver driver;
  private IDictionary<String, Object> vars;
  IJavaScriptExecutor js;
  

  public void setUp() {
    driver = new FirefoxDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  public void tearDown() {
    driver.Quit();
    driver.Dispose();
  }
  public void login() {
    driver.Url = \\"https://the-internet.herokuapp.com/\\";
    
    driver.FindElement(By.Id(\\"username\\")).SendKeys(this.vars[\\"username\\"].ToString());
    driver.FindElement(By.Id(\\"password\\")).SendKeys(this.vars[\\"password\\"].ToString());
    
  }
  [Fact]
  public void validcredentials() {
    this.vars[\\"username\\"] = \\"tomsmith\\"
    this.vars[\\"password\\"] = \\"SuperSecretPassword!\\"
    login();
  }
}
"
`;

exports[`Code Export C# xUnit Selenium should export a test with commands that open a new window 1`] = `
"// Generated by Selenium IDE
using System;
using System.Collections.Generic;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using Xunit;
public class SelectwindowTest {
  private WebDriver driver;
  private IDictionary<String, Object> vars;
  IJavaScriptExecutor js;
  

  public void setUp() {
    driver = new FirefoxDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
  }
  public void tearDown() {
    driver.Quit();
    driver.Dispose();
  }
  public String waitForWindow(int timeout) {
    Thread.Sleep(timeout);
    Console.WriteLine(\\"Main thread exits.\\");
    var whNow = driver.WindowHandles;
    var whThen = this.vars[\\"WindowHandles\\"];
    if (whNow.Count > whThen.Count) {
      whNow.RemoveAll(whThen);
    }
    return whNow.GetEnumerator().MoveNext();
  }
  [Fact]
  public void selectwindow() {
    driver.Url = \\"http://the-internet.herokuapp.com/\\";
    driver.Manage().Window.Size=new System.Drawing.Size(1260, 1027);
    this.vars[\\"root\\"] = driver.WindowHandle
    driver.SwitchTo().Window(this.vars[\\"win9625\\"].ToString());
    Assert.Equals(driver.Title, is(\\"New Window\\"));
    driver.SwitchTo().Window(this.vars[\\"root\\"].ToString());
    Assert.Equals(driver.Title, is(\\"The Internet\\"));
  }
}
"
`;
