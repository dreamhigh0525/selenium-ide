// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Code Export C# xUnit Selenium should export a suite 1`] = `
"// Generated by Selenium IDE
using System;
using System.Collections.Generic;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using Xunit;
namespace LoginTest {
  public class DriverFixture : IDisposable
  {
    public DriverFixture()
      {
      driver = new ChromeDriver {get; private set;}
      js = (IJavaScriptExecutor) driver {get; private set;};
      vars = new Dictionary<String, Object>() {get; private set;};
    }
    public void Dispose()
    {
      driver.Dispose()
    }
  }
  public class TestSuite : IClassFixture<DriverFixture>
  {
    public IWebDriver driver;
    public IDictionary<String, Object> vars;
    public IJavaScriptExecutor js;

    public TestSuite (DriverFixture _dF)
    {
      this.dF = _dF;
      driver = this.dF.driver;
      js = this.dF.js;
      vars = this.dF.vars;
    }
  [Fact]
  public void Validcredentials() {
    driver.Navigate().GoToUrl(\\"http://the-internet.herokuapp.com/login\\");
    driver.Manage().Window.Size = new System.Drawing.Size(1440, 1177);
    driver.FindElement(By.Id(\\"username\\")).SendKeys(\\"tomsmith\\");
    driver.FindElement(By.Id(\\"password\\")).SendKeys(\\"SuperSecretPassword!\\");
    driver.FindElement(By.CssSelector(\\"#login button\\"))).Click();
    Assert.Equal(driver.FindElement(By.CssSelector(\\".flash.success\\")).Text, \\"You logged into a secure area!\\\\\\\\\\\\\\\\n×\\");
  }
  [Fact]
  public void Invalidcredentials() {
    driver.Navigate().GoToUrl(\\"http://the-internet.herokuapp.com/login\\");
    driver.Manage().Window.Size = new System.Drawing.Size(1440, 1177);
    driver.FindElement(By.Id(\\"username\\")).SendKeys(\\"blah\\");
    driver.FindElement(By.Id(\\"password\\")).SendKeys(\\"blah\\");
    driver.FindElement(By.CssSelector(\\"#login button\\"))).Click();
    Assert.Equal(driver.FindElement(By.Id(\\"flash\\")).Text, \\"Your username is invalid!\\\\\\\\\\\\\\\\n×\\");
  }
}
"
`;

exports[`Code Export C# xUnit Selenium should export a suite that uses control flow commands 1`] = `
"// Generated by Selenium IDE
using System;
using System.Collections.Generic;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using Xunit;
namespace ControlflowTest {
  public class DriverFixture : IDisposable
  {
    public DriverFixture()
      {
      driver = new ChromeDriver {get; private set;}
      js = (IJavaScriptExecutor) driver {get; private set;};
      vars = new Dictionary<String, Object>() {get; private set;};
    }
    public void Dispose()
    {
      driver.Dispose()
    }
  }
  public class TestSuite : IClassFixture<DriverFixture>
  {
    public IWebDriver driver;
    public IDictionary<String, Object> vars;
    public IJavaScriptExecutor js;

    public TestSuite (DriverFixture _dF)
    {
      this.dF = _dF;
      driver = this.dF.driver;
      js = this.dF.js;
      vars = this.dF.vars;
    }
  [Fact]
  public void Controlflowif() {
    this.vars[\\"myVar\\"] = js.executeScript(\\"return 'a'\\")
    if ((Boolean) js.executeScript(return (\\"arguments[0] === 'a'\\"), this.vars[myVar])) {
      this.vars[\\"output\\"] = js.executeScript(\\"return 'a'\\")
    } else if ((Boolean) js.executeScript(return (\\"arguments[0] === 'b'\\"), this.vars[myVar])) {
      this.vars[\\"output\\"] = js.executeScript(\\"return 'b'\\")
    } else {
      this.vars[\\"output\\"] = js.executeScript(\\"return 'c'\\")
    }
    Assert.Equal(this.vars[\\"output\\"].ToString(), \\"a\\");
  }
  [Fact]
  public void Controlflowelseif() {
    this.vars[\\"myVar\\"] = js.executeScript(\\"return 'b'\\")
    if ((Boolean) js.executeScript(return (\\"arguments[0] === 'a'\\"), this.vars[myVar])) {
      this.vars[\\"output\\"] = js.executeScript(\\"return 'a'\\")
    } else if ((Boolean) js.executeScript(return (\\"arguments[0] === 'b'\\"), this.vars[myVar])) {
      this.vars[\\"output\\"] = js.executeScript(\\"return 'b'\\")
    } else {
      this.vars[\\"output\\"] = js.executeScript(\\"return 'c'\\")
    }
    Assert.Equal(this.vars[\\"output\\"].ToString(), \\"b\\");
  }
  [Fact]
  public void Controlflowelse() {
    this.vars[\\"myVar\\"] = js.executeScript(\\"return 'c'\\")
    if ((Boolean) js.executeScript(return (\\"arguments[0] === 'a'\\"), this.vars[myVar])) {
      this.vars[\\"output\\"] = js.executeScript(\\"return 'a'\\")
    } else if ((Boolean) js.executeScript(return (\\"arguments[0] === 'b'\\"), this.vars[myVar])) {
      this.vars[\\"output\\"] = js.executeScript(\\"return 'b'\\")
    } else {
      this.vars[\\"output\\"] = js.executeScript(\\"return 'c'\\")
    }
    Assert.Equal(this.vars[\\"output\\"].ToString(), \\"c\\");
  }
  [Fact]
  public void Controlflowdo() {
    this.vars[\\"check\\"] = js.executeScript(\\"return 1\\")
    do {
      this.vars[\\"check\\"] = js.executeScript(\\"return arguments[0] + 1, this.vars[check]\\")
    } while ((Boolean) js.executeScript(return (\\"arguments[0] < 3\\"), this.vars[check]));
    Assert.Equal(this.vars[\\"check\\"].ToString(), \\"3\\");
  }
  [Fact]
  public void Controlflowtimes() {
    this.vars[\\"check\\"] = js.executeScript(\\"return 1\\")
    Integer times = 2;
    for(int i = 0; i < times; i++) {
      this.vars[\\"check\\"] = js.executeScript(\\"return arguments[0] + 1, this.vars[check]\\")
    }
    Assert.Equal(this.vars[\\"check\\"].ToString(), \\"3\\");
  }
  [Fact]
  public void Controlflowwhile() {
    this.vars[\\"check\\"] = js.executeScript(\\"return 1\\")
    while ((Boolean) js.executeScript(return (\\"arguments[0] < 3\\"), this.vars[check])) {
      this.vars[\\"check\\"] = js.executeScript(\\"return arguments[0] + 1, this.vars[check]\\")
    }
    Assert.Equal(this.vars[\\"check\\"].ToString(), \\"3\\");
  }
}
"
`;

exports[`Code Export C# xUnit Selenium should export a suite with a reused test method 1`] = `
"// Generated by Selenium IDE
using System;
using System.Collections.Generic;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using Xunit;
namespace LoginTest {
  public class DriverFixture : IDisposable
  {
    public DriverFixture()
      {
      driver = new ChromeDriver {get; private set;}
      js = (IJavaScriptExecutor) driver {get; private set;};
      vars = new Dictionary<String, Object>() {get; private set;};
    }
    public void Dispose()
    {
      driver.Dispose()
    }
  }
  public class TestSuite : IClassFixture<DriverFixture>
  {
    public IWebDriver driver;
    public IDictionary<String, Object> vars;
    public IJavaScriptExecutor js;

    public TestSuite (DriverFixture _dF)
    {
      this.dF = _dF;
      driver = this.dF.driver;
      js = this.dF.js;
      vars = this.dF.vars;
    }
  public void login() {
    driver.Navigate().GoToUrl(\\"https://the-internet.herokuapp.com/\\");
    driver.FindElement(By.LinkText(\\"Form Authentication\\"))).Click();
    driver.FindElement(By.Id(\\"username\\")).SendKeys(this.vars[\\"username\\"].ToString());
    driver.FindElement(By.Id(\\"password\\")).SendKeys(this.vars[\\"password\\"].ToString());
    driver.FindElement(By.CssSelector(\\".fa\\"))).Click();
  }
  [Fact]
  public void Invalidcredentials() {
    this.vars[\\"username\\"] = \\"blah\\"
    this.vars[\\"password\\"] = \\"blah\\"
    login();
  }
  [Fact]
  public void Validcredentials() {
    this.vars[\\"username\\"] = \\"tomsmith\\"
    this.vars[\\"password\\"] = \\"SuperSecretPassword!\\"
    login();
  }
}
"
`;

exports[`Code Export C# xUnit Selenium should export a suite with commands that open a new window inside of a reused test method 1`] = `
"// Generated by Selenium IDE
using System;
using System.Collections.Generic;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using Xunit;
namespace DefaultSuiteTest {
  public class DriverFixture : IDisposable
  {
    public DriverFixture()
      {
      driver = new ChromeDriver {get; private set;}
      js = (IJavaScriptExecutor) driver {get; private set;};
      vars = new Dictionary<String, Object>() {get; private set;};
    }
    public void Dispose()
    {
      driver.Dispose()
    }
  }
  public class TestSuite : IClassFixture<DriverFixture>
  {
    public IWebDriver driver;
    public IDictionary<String, Object> vars;
    public IJavaScriptExecutor js;

    public TestSuite (DriverFixture _dF)
    {
      this.dF = _dF;
      driver = this.dF.driver;
      js = this.dF.js;
      vars = this.dF.vars;
    }
  public String waitForWindow(int timeout) {
    try {
      Thread.Sleep(timeout);
    }
    catch {
      Console.WriteLine(\\"{0} Exception caught.\\", e);
    }
    var whNow = driver.WindowHandles;
    var whThen = this.vars[\\"WindowHandles\\"];
    if (whNow.Count > whThen.Count) {
      whNow.RemoveAll(whThen);
    }
    return whNow.GetEnumerator().MoveNext();
  }
  public void selectwindow() {
    driver.Navigate().GoToUrl(\\"http://the-internet.herokuapp.com/windows\\");
    this.vars[\\"WindowHandles\\"] = this.driver.WindowHandles
    driver.FindElement(By.LinkText(\\"Click Here\\"))).Click();
    this.vars[\\"undefined\\" = this.WaitForWindow(2000));
    driver.SwitchTo().Window(this.vars[\\"win9425\\"].ToString());
    Assert.Equal(driver.Title, \\"New Window\\");
  }
  [Fact]
  public void Reuse() {
    selectwindow();
  }
}
"
`;

exports[`Code Export C# xUnit Selenium should export a suite with just one new window util method when there are multiple commands that open a new window 1`] = `
"// Generated by Selenium IDE
using System;
using System.Collections.Generic;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using Xunit;
namespace DefaultSuiteTest {
  public class DriverFixture : IDisposable
  {
    public DriverFixture()
      {
      driver = new ChromeDriver {get; private set;}
      js = (IJavaScriptExecutor) driver {get; private set;};
      vars = new Dictionary<String, Object>() {get; private set;};
    }
    public void Dispose()
    {
      driver.Dispose()
    }
  }
  public class TestSuite : IClassFixture<DriverFixture>
  {
    public IWebDriver driver;
    public IDictionary<String, Object> vars;
    public IJavaScriptExecutor js;

    public TestSuite (DriverFixture _dF)
    {
      this.dF = _dF;
      driver = this.dF.driver;
      js = this.dF.js;
      vars = this.dF.vars;
    }
  public String waitForWindow(int timeout) {
    try {
      Thread.Sleep(timeout);
    }
    catch {
      Console.WriteLine(\\"{0} Exception caught.\\", e);
    }
    var whNow = driver.WindowHandles;
    var whThen = this.vars[\\"WindowHandles\\"];
    if (whNow.Count > whThen.Count) {
      whNow.RemoveAll(whThen);
    }
    return whNow.GetEnumerator().MoveNext();
  }
  public void selectwindow() {
    driver.Navigate().GoToUrl(\\"http://the-internet.herokuapp.com/windows\\");
    this.vars[\\"WindowHandles\\"] = this.driver.WindowHandles
    driver.FindElement(By.LinkText(\\"Click Here\\"))).Click();
    this.vars[\\"undefined\\" = this.WaitForWindow(2000));
    driver.SwitchTo().Window(this.vars[\\"win9425\\"].ToString());
    Assert.Equal(driver.Title, \\"New Window\\");
  }
  [Fact]
  public void Reuse() {
    selectwindow();
  }
  [Fact]
  public void Selectwindow() {
    driver.Navigate().GoToUrl(\\"http://the-internet.herokuapp.com/windows\\");
    this.vars[\\"WindowHandles\\"] = this.driver.WindowHandles
    driver.FindElement(By.LinkText(\\"Click Here\\"))).Click();
    this.vars[\\"undefined\\" = this.WaitForWindow(2000));
    driver.SwitchTo().Window(this.vars[\\"win9425\\"].ToString());
    Assert.Equal(driver.Title, \\"New Window\\");
  }
}
"
`;

exports[`Code Export C# xUnit Selenium should export a test 1`] = `
"// Generated by Selenium IDE
using System;
using System.Collections.Generic;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using Xunit;
namespace LoginTest {
  public class DriverFixture : IDisposable
  {
    public DriverFixture()
      {
      driver = new ChromeDriver {get; private set;}
      js = (IJavaScriptExecutor) driver {get; private set;};
      vars = new Dictionary<String, Object>() {get; private set;};
    }
    public void Dispose()
    {
      driver.Dispose()
    }
  }
  public class TestSuite : IClassFixture<DriverFixture>
  {
    public IWebDriver driver;
    public IDictionary<String, Object> vars;
    public IJavaScriptExecutor js;

    public TestSuite (DriverFixture _dF)
    {
      this.dF = _dF;
      driver = this.dF.driver;
      js = this.dF.js;
      vars = this.dF.vars;
    }
  [Fact]
  public void Login() {
    driver.Navigate().GoToUrl(\\"http://the-internet.herokuapp.com/login\\");
    driver.Manage().Window.Size = new System.Drawing.Size(1440, 1177);
    driver.FindElement(By.Id(\\"username\\")).SendKeys(\\"tomsmith\\");
    driver.FindElement(By.Id(\\"password\\")).SendKeys(\\"SuperSecretPassword!\\");
    driver.FindElement(By.CssSelector(\\"#login button\\"))).Click();
    Assert.Equal(driver.FindElement(By.CssSelector(\\".flash.success\\")).Text, \\"You logged into a secure area!\\\\\\\\\\\\\\\\n×\\");
  }
}
"
`;

exports[`Code Export C# xUnit Selenium should export a test with a reused test method 1`] = `
"// Generated by Selenium IDE
using System;
using System.Collections.Generic;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using Xunit;
namespace ValidcredentialsTest {
  public class DriverFixture : IDisposable
  {
    public DriverFixture()
      {
      driver = new ChromeDriver {get; private set;}
      js = (IJavaScriptExecutor) driver {get; private set;};
      vars = new Dictionary<String, Object>() {get; private set;};
    }
    public void Dispose()
    {
      driver.Dispose()
    }
  }
  public class TestSuite : IClassFixture<DriverFixture>
  {
    public IWebDriver driver;
    public IDictionary<String, Object> vars;
    public IJavaScriptExecutor js;

    public TestSuite (DriverFixture _dF)
    {
      this.dF = _dF;
      driver = this.dF.driver;
      js = this.dF.js;
      vars = this.dF.vars;
    }
  public void login() {
    driver.Navigate().GoToUrl(\\"https://the-internet.herokuapp.com/\\");
    driver.FindElement(By.LinkText(\\"Form Authentication\\"))).Click();
    driver.FindElement(By.Id(\\"username\\")).SendKeys(this.vars[\\"username\\"].ToString());
    driver.FindElement(By.Id(\\"password\\")).SendKeys(this.vars[\\"password\\"].ToString());
    driver.FindElement(By.CssSelector(\\".fa\\"))).Click();
  }
  [Fact]
  public void Validcredentials() {
    this.vars[\\"username\\"] = \\"tomsmith\\"
    this.vars[\\"password\\"] = \\"SuperSecretPassword!\\"
    login();
  }
}
"
`;

exports[`Code Export C# xUnit Selenium should export a test with commands that open a new window 1`] = `
"// Generated by Selenium IDE
using System;
using System.Collections.Generic;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using Xunit;
namespace SelectwindowTest {
  public class DriverFixture : IDisposable
  {
    public DriverFixture()
      {
      driver = new ChromeDriver {get; private set;}
      js = (IJavaScriptExecutor) driver {get; private set;};
      vars = new Dictionary<String, Object>() {get; private set;};
    }
    public void Dispose()
    {
      driver.Dispose()
    }
  }
  public class TestSuite : IClassFixture<DriverFixture>
  {
    public IWebDriver driver;
    public IDictionary<String, Object> vars;
    public IJavaScriptExecutor js;

    public TestSuite (DriverFixture _dF)
    {
      this.dF = _dF;
      driver = this.dF.driver;
      js = this.dF.js;
      vars = this.dF.vars;
    }
  public String waitForWindow(int timeout) {
    try {
      Thread.Sleep(timeout);
    }
    catch {
      Console.WriteLine(\\"{0} Exception caught.\\", e);
    }
    var whNow = driver.WindowHandles;
    var whThen = this.vars[\\"WindowHandles\\"];
    if (whNow.Count > whThen.Count) {
      whNow.RemoveAll(whThen);
    }
    return whNow.GetEnumerator().MoveNext();
  }
  [Fact]
  public void Selectwindow() {
    driver.Navigate().GoToUrl(\\"http://the-internet.herokuapp.com/\\");
    driver.Manage().Window.Size = new System.Drawing.Size(1260, 1027);
    driver.FindElement(By.LinkText(\\"Multiple Windows\\"))).Click();
    this.vars[\\"WindowHandles\\"] = this.driver.WindowHandles
    driver.FindElement(By.LinkText(\\"Click Here\\"))).Click();
    this.vars[\\"undefined\\" = this.WaitForWindow(2000));
    this.vars[\\"root\\"] = driver.CurrentWindowHandle
    driver.SwitchTo().Window(this.vars[\\"win9625\\"].ToString());
    Assert.Equal(driver.Title, \\"New Window\\");
    driver.SwitchTo().Window(this.vars[\\"root\\"].ToString());
    Assert.Equal(driver.Title, \\"The Internet\\");
  }
}
"
`;
