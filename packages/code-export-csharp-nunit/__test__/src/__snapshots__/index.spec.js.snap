// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Code Export C# NUnit should export a suite 1`] = `
"// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using NUnit.Framework;
[TestFixture]
public class LoginTest {
  private IWebDriver driver;
  public IDictionary<string, object> vars {get; private set;}
  private IJavaScriptExecutor js;
  [SetUp]
  public void SetUp() {
    driver = new ChromeDriver();
    js = (IJavaScriptExecutor)driver;
    vars = new Dictionary<string, object>();
  }
  [TearDown]
  protected void TearDown() {
    driver.Quit();
  }
  [Test]
  public void validcredentials() {
    driver.Navigate().GoToUrl(\\"http://the-internet.herokuapp.com/login\\");
    driver.Manage().Window.Size = new System.Drawing.Size(1440, 1177);
    driver.FindElement(By.Id(\\"username\\")).SendKeys(\\"tomsmith\\");
    driver.FindElement(By.Id(\\"password\\")).SendKeys(\\"SuperSecretPassword!\\");
    driver.FindElement(By.CssSelector(\\"#login button\\")).Click();
    Assert.That(driver.FindElement(By.CssSelector(\\".flash.success\\")).Text, Is.EqualTo(\\"You logged into a secure area!\\\\\\\\\\\\\\\\n×\\"));
  }
  [Test]
  public void invalidcredentials() {
    driver.Navigate().GoToUrl(\\"http://the-internet.herokuapp.com/login\\");
    driver.Manage().Window.Size = new System.Drawing.Size(1440, 1177);
    driver.FindElement(By.Id(\\"username\\")).SendKeys(\\"blah\\");
    driver.FindElement(By.Id(\\"password\\")).SendKeys(\\"blah\\");
    driver.FindElement(By.CssSelector(\\"#login button\\")).Click();
    Assert.That(driver.FindElement(By.Id(\\"flash\\")).Text, Is.EqualTo(\\"Your username is invalid!\\\\\\\\\\\\\\\\n×\\"));
  }
}
"
`;

exports[`Code Export C# NUnit should export a suite that uses control flow commands 1`] = `
"// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using NUnit.Framework;
[TestFixture]
public class ControlflowTest {
  private IWebDriver driver;
  public IDictionary<string, object> vars {get; private set;}
  private IJavaScriptExecutor js;
  [SetUp]
  public void SetUp() {
    driver = new ChromeDriver();
    js = (IJavaScriptExecutor)driver;
    vars = new Dictionary<string, object>();
  }
  [TearDown]
  protected void TearDown() {
    driver.Quit();
  }
  [Test]
  public void controlflowif() {
    vars[\\"myVar\\"] = js.ExecuteScript(\\"return 'a'\\");
    if ((Boolean) js.ExecuteScript(\\"return (arguments[0] === 'a')\\", vars[\\"myVar\\"])) {
      vars[\\"output\\"] = js.ExecuteScript(\\"return 'a'\\");
    } else if ((Boolean) js.ExecuteScript(\\"return (arguments[0] === 'b')\\", vars[\\"myVar\\"])) {
      vars[\\"output\\"] = js.ExecuteScript(\\"return 'b'\\");
    } else {
      vars[\\"output\\"] = js.ExecuteScript(\\"return 'c'\\");
    }
    Assert.That(vars[\\"output\\"].ToString(), Is.EqualTo(\\"a\\"));
  }
  [Test]
  public void controlflowelseif() {
    vars[\\"myVar\\"] = js.ExecuteScript(\\"return 'b'\\");
    if ((Boolean) js.ExecuteScript(\\"return (arguments[0] === 'a')\\", vars[\\"myVar\\"])) {
      vars[\\"output\\"] = js.ExecuteScript(\\"return 'a'\\");
    } else if ((Boolean) js.ExecuteScript(\\"return (arguments[0] === 'b')\\", vars[\\"myVar\\"])) {
      vars[\\"output\\"] = js.ExecuteScript(\\"return 'b'\\");
    } else {
      vars[\\"output\\"] = js.ExecuteScript(\\"return 'c'\\");
    }
    Assert.That(vars[\\"output\\"].ToString(), Is.EqualTo(\\"b\\"));
  }
  [Test]
  public void controlflowelse() {
    vars[\\"myVar\\"] = js.ExecuteScript(\\"return 'c'\\");
    if ((Boolean) js.ExecuteScript(\\"return (arguments[0] === 'a')\\", vars[\\"myVar\\"])) {
      vars[\\"output\\"] = js.ExecuteScript(\\"return 'a'\\");
    } else if ((Boolean) js.ExecuteScript(\\"return (arguments[0] === 'b')\\", vars[\\"myVar\\"])) {
      vars[\\"output\\"] = js.ExecuteScript(\\"return 'b'\\");
    } else {
      vars[\\"output\\"] = js.ExecuteScript(\\"return 'c'\\");
    }
    Assert.That(vars[\\"output\\"].ToString(), Is.EqualTo(\\"c\\"));
  }
  [Test]
  public void controlflowdo() {
    vars[\\"check\\"] = js.ExecuteScript(\\"return 1\\");
    do {
      vars[\\"check\\"] = js.ExecuteScript(\\"return arguments[0] + 1\\", vars[\\"check\\"]);
    } while ((Boolean) js.ExecuteScript(\\"return (arguments[0] < 3)\\", vars[\\"check\\"]));
    Assert.That(vars[\\"check\\"].ToString(), Is.EqualTo(\\"3\\"));
  }
  [Test]
  public void controlflowtimes() {
    vars[\\"check\\"] = js.ExecuteScript(\\"return 1\\");
    var times = 2;
    for(int i = 0; i < times; i++) {
      vars[\\"check\\"] = js.ExecuteScript(\\"return arguments[0] + 1\\", vars[\\"check\\"]);
    }
    Assert.That(vars[\\"check\\"].ToString(), Is.EqualTo(\\"3\\"));
  }
  [Test]
  public void controlflowwhile() {
    vars[\\"check\\"] = js.ExecuteScript(\\"return 1\\");
    while ((Boolean) js.ExecuteScript(\\"return (arguments[0] < 3)\\", vars[\\"check\\"])) {
      vars[\\"check\\"] = js.ExecuteScript(\\"return arguments[0] + 1\\", vars[\\"check\\"]);
    }
    Assert.That(vars[\\"check\\"].ToString(), Is.EqualTo(\\"3\\"));
  }
}
"
`;

exports[`Code Export C# NUnit should export a suite with a reused test method 1`] = `
"// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using NUnit.Framework;
[TestFixture]
public class LoginTest {
  private IWebDriver driver;
  public IDictionary<string, object> vars {get; private set;}
  private IJavaScriptExecutor js;
  [SetUp]
  public void SetUp() {
    driver = new ChromeDriver();
    js = (IJavaScriptExecutor)driver;
    vars = new Dictionary<string, object>();
  }
  [TearDown]
  protected void TearDown() {
    driver.Quit();
  }
  public void login() {
    driver.Navigate().GoToUrl(\\"https://the-internet.herokuapp.com/\\");
    driver.FindElement(By.LinkText(\\"Form Authentication\\")).Click();
    driver.FindElement(By.Id(\\"username\\")).SendKeys(vars[\\"username\\"].ToString());
    driver.FindElement(By.Id(\\"password\\")).SendKeys(vars[\\"password\\"].ToString());
    driver.FindElement(By.CssSelector(\\".fa\\")).Click();
  }
  [Test]
  public void invalidcredentials() {
    vars[\\"username\\"] = \\"blah\\";
    vars[\\"password\\"] = \\"blah\\";
    login();
  }
  [Test]
  public void validcredentials() {
    vars[\\"username\\"] = \\"tomsmith\\";
    vars[\\"password\\"] = \\"SuperSecretPassword!\\";
    login();
  }
}
"
`;

exports[`Code Export C# NUnit should export a suite with commands that open a new window inside of a reused test method 1`] = `
"// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using NUnit.Framework;
[TestFixture]
public class DefaultSuiteTest {
  private IWebDriver driver;
  public IDictionary<string, object> vars {get; private set;}
  private IJavaScriptExecutor js;
  [SetUp]
  public void SetUp() {
    driver = new ChromeDriver();
    js = (IJavaScriptExecutor)driver;
    vars = new Dictionary<string, object>();
  }
  [TearDown]
  protected void TearDown() {
    driver.Quit();
  }
  public string waitForWindow(int timeout) {
    try {
      Thread.Sleep(timeout);
    } catch(Exception e) {
      Console.WriteLine(\\"{0} Exception caught.\\", e);
    }
    var whNow = ((IReadOnlyCollection<object>)driver.WindowHandles).ToList();
    var whThen = ((IReadOnlyCollection<object>)vars[\\"WindowHandles\\"]).ToList();
    if (whNow.Count > whThen.Count) {
      return whNow.Except(whThen).First().ToString();
    } else {
      return whNow.First().ToString();
    }
  }
  public void selectwindow() {
    driver.Navigate().GoToUrl(\\"http://the-internet.herokuapp.com/windows\\");
    vars[\\"WindowHandles\\"] = driver.WindowHandles;
    driver.FindElement(By.LinkText(\\"Click Here\\")).Click();
    vars[\\"win9425\\"] = waitForWindow(2000);
    driver.SwitchTo().Window(vars[\\"win9425\\"].ToString());
    Assert.That(driver.Title, Is.EqualTo(\\"New Window\\"));
  }
  [Test]
  public void reuse() {
    selectwindow();
  }
}
"
`;

exports[`Code Export C# NUnit should export a suite with just one new window util method when there are multiple commands that open a new window 1`] = `
"// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using NUnit.Framework;
[TestFixture]
public class DefaultSuiteTest {
  private IWebDriver driver;
  public IDictionary<string, object> vars {get; private set;}
  private IJavaScriptExecutor js;
  [SetUp]
  public void SetUp() {
    driver = new ChromeDriver();
    js = (IJavaScriptExecutor)driver;
    vars = new Dictionary<string, object>();
  }
  [TearDown]
  protected void TearDown() {
    driver.Quit();
  }
  public string waitForWindow(int timeout) {
    try {
      Thread.Sleep(timeout);
    } catch(Exception e) {
      Console.WriteLine(\\"{0} Exception caught.\\", e);
    }
    var whNow = ((IReadOnlyCollection<object>)driver.WindowHandles).ToList();
    var whThen = ((IReadOnlyCollection<object>)vars[\\"WindowHandles\\"]).ToList();
    if (whNow.Count > whThen.Count) {
      return whNow.Except(whThen).First().ToString();
    } else {
      return whNow.First().ToString();
    }
  }
  public void selectwindow() {
    driver.Navigate().GoToUrl(\\"http://the-internet.herokuapp.com/windows\\");
    vars[\\"WindowHandles\\"] = driver.WindowHandles;
    driver.FindElement(By.LinkText(\\"Click Here\\")).Click();
    vars[\\"win9425\\"] = waitForWindow(2000);
    driver.SwitchTo().Window(vars[\\"win9425\\"].ToString());
    Assert.That(driver.Title, Is.EqualTo(\\"New Window\\"));
  }
  [Test]
  public void reuse() {
    selectwindow();
  }
  [Test]
  public void selectwindow() {
    driver.Navigate().GoToUrl(\\"http://the-internet.herokuapp.com/windows\\");
    vars[\\"WindowHandles\\"] = driver.WindowHandles;
    driver.FindElement(By.LinkText(\\"Click Here\\")).Click();
    vars[\\"win9425\\"] = waitForWindow(2000);
    driver.SwitchTo().Window(vars[\\"win9425\\"].ToString());
    Assert.That(driver.Title, Is.EqualTo(\\"New Window\\"));
  }
}
"
`;

exports[`Code Export C# NUnit should export a test 1`] = `
"// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using NUnit.Framework;
[TestFixture]
public class LoginTest {
  private IWebDriver driver;
  public IDictionary<string, object> vars {get; private set;}
  private IJavaScriptExecutor js;
  [SetUp]
  public void SetUp() {
    driver = new ChromeDriver();
    js = (IJavaScriptExecutor)driver;
    vars = new Dictionary<string, object>();
  }
  [TearDown]
  protected void TearDown() {
    driver.Quit();
  }
  [Test]
  public void login() {
    driver.Navigate().GoToUrl(\\"http://the-internet.herokuapp.com/login\\");
    driver.Manage().Window.Size = new System.Drawing.Size(1440, 1177);
    driver.FindElement(By.Id(\\"username\\")).SendKeys(\\"tomsmith\\");
    driver.FindElement(By.Id(\\"password\\")).SendKeys(\\"SuperSecretPassword!\\");
    driver.FindElement(By.CssSelector(\\"#login button\\")).Click();
    Assert.That(driver.FindElement(By.CssSelector(\\".flash.success\\")).Text, Is.EqualTo(\\"You logged into a secure area!\\\\\\\\\\\\\\\\n×\\"));
  }
}
"
`;

exports[`Code Export C# NUnit should export a test with a reused test method 1`] = `
"// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using NUnit.Framework;
[TestFixture]
public class ValidcredentialsTest {
  private IWebDriver driver;
  public IDictionary<string, object> vars {get; private set;}
  private IJavaScriptExecutor js;
  [SetUp]
  public void SetUp() {
    driver = new ChromeDriver();
    js = (IJavaScriptExecutor)driver;
    vars = new Dictionary<string, object>();
  }
  [TearDown]
  protected void TearDown() {
    driver.Quit();
  }
  public void login() {
    driver.Navigate().GoToUrl(\\"https://the-internet.herokuapp.com/\\");
    driver.FindElement(By.LinkText(\\"Form Authentication\\")).Click();
    driver.FindElement(By.Id(\\"username\\")).SendKeys(vars[\\"username\\"].ToString());
    driver.FindElement(By.Id(\\"password\\")).SendKeys(vars[\\"password\\"].ToString());
    driver.FindElement(By.CssSelector(\\".fa\\")).Click();
  }
  [Test]
  public void validcredentials() {
    vars[\\"username\\"] = \\"tomsmith\\";
    vars[\\"password\\"] = \\"SuperSecretPassword!\\";
    login();
  }
}
"
`;

exports[`Code Export C# NUnit should export a test with commands that open a new window 1`] = `
"// Generated by Selenium IDE
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using NUnit.Framework;
[TestFixture]
public class SelectwindowTest {
  private IWebDriver driver;
  public IDictionary<string, object> vars {get; private set;}
  private IJavaScriptExecutor js;
  [SetUp]
  public void SetUp() {
    driver = new ChromeDriver();
    js = (IJavaScriptExecutor)driver;
    vars = new Dictionary<string, object>();
  }
  [TearDown]
  protected void TearDown() {
    driver.Quit();
  }
  public string waitForWindow(int timeout) {
    try {
      Thread.Sleep(timeout);
    } catch(Exception e) {
      Console.WriteLine(\\"{0} Exception caught.\\", e);
    }
    var whNow = ((IReadOnlyCollection<object>)driver.WindowHandles).ToList();
    var whThen = ((IReadOnlyCollection<object>)vars[\\"WindowHandles\\"]).ToList();
    if (whNow.Count > whThen.Count) {
      return whNow.Except(whThen).First().ToString();
    } else {
      return whNow.First().ToString();
    }
  }
  [Test]
  public void selectwindow() {
    driver.Navigate().GoToUrl(\\"http://the-internet.herokuapp.com/\\");
    driver.Manage().Window.Size = new System.Drawing.Size(1260, 1027);
    driver.FindElement(By.LinkText(\\"Multiple Windows\\")).Click();
    vars[\\"WindowHandles\\"] = driver.WindowHandles;
    driver.FindElement(By.LinkText(\\"Click Here\\")).Click();
    vars[\\"win9625\\"] = waitForWindow(2000);
    vars[\\"root\\"] = driver.CurrentWindowHandle;
    driver.SwitchTo().Window(vars[\\"win9625\\"].ToString());
    Assert.That(driver.Title, Is.EqualTo(\\"New Window\\"));
    driver.SwitchTo().Window(vars[\\"root\\"].ToString());
    Assert.That(driver.Title, Is.EqualTo(\\"The Internet\\"));
  }
}
"
`;
