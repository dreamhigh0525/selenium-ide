// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Code Export Java JUnit Selenium should export a suite 1`] = `
"// Generated by Selenium IDE
using System;
using System.Collections;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using NUnit.Framework;
[TestFixture]
public class LoginTest {
  private IWebDriver Driver;
  private Hashtable vars;
  private IJavaScriptExecutor js;
  [SetUp]
  public void SetUp() {
    this.Driver = new ChromeDriver();
    this.js = (IJavaScriptExecutor)Driver;
    this.vars = new Hashtable();
  }
  [TearDown]
  protected void TearDown() {
    Driver.Quit();
  }
  [Test]
  public void validcredentials() {
    Driver.Navigate().GoToUrl(\\"http://the-internet.herokuapp.com/login\\");
    Driver.Manage().Window.Size = new System.Drawing.Size(1440, 1177);
    Driver.FindElement(By.Id(\\"username\\")).SendKeys(\\"tomsmith\\");
    Driver.FindElement(By.Id(\\"password\\")).SendKeys(\\"SuperSecretPassword!\\");
    Driver.FindElement(By.CssSelector(\\"#login button\\")).Click();
    Assert.That(Driver.FindElement(By.CssSelector(\\".flash.success\\")).Text, Is.EqualTo(\\"You logged into a secure area!\\\\\\\\\\\\\\\\n×\\"));
  }
  [Test]
  public void invalidcredentials() {
    Driver.Navigate().GoToUrl(\\"http://the-internet.herokuapp.com/login\\");
    Driver.Manage().Window.Size = new System.Drawing.Size(1440, 1177);
    Driver.FindElement(By.Id(\\"username\\")).SendKeys(\\"blah\\");
    Driver.FindElement(By.Id(\\"password\\")).SendKeys(\\"blah\\");
    Driver.FindElement(By.CssSelector(\\"#login button\\")).Click();
    Assert.That(Driver.FindElement(By.Id(\\"flash\\")).Text, Is.EqualTo(\\"Your username is invalid!\\\\\\\\\\\\\\\\n×\\"));
  }
}
"
`;

exports[`Code Export Java JUnit Selenium should export a suite that uses control flow commands 1`] = `
"// Generated by Selenium IDE
using System;
using System.Collections;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using NUnit.Framework;
[TestFixture]
public class ControlflowTest {
  private IWebDriver Driver;
  private Hashtable vars;
  private IJavaScriptExecutor js;
  [SetUp]
  public void SetUp() {
    this.Driver = new ChromeDriver();
    this.js = (IJavaScriptExecutor)Driver;
    this.vars = new Hashtable();
  }
  [TearDown]
  protected void TearDown() {
    Driver.Quit();
  }
  [Test]
  public void controlflowif() {
    vars.Add(\\"myVar\\", js.executeScript(\\"return 'a'\\"));
    if ((Boolean) js.executeScript(\\"return (arguments[0] === 'a')\\", vars[\\"myVar\\"])) {
      vars.Add(\\"output\\", js.executeScript(\\"return 'a'\\"));
    } else if ((Boolean) js.executeScript(\\"return (arguments[0] === 'b')\\", vars[\\"myVar\\"])) {
      vars.Add(\\"output\\", js.executeScript(\\"return 'b'\\"));
    } else {
      vars.Add(\\"output\\", js.executeScript(\\"return 'c'\\"));
    }
    Assert.That(vars[\\"output\\"].ToString(), Is.EqualTo(\\"a\\"));
  }
  [Test]
  public void controlflowelseif() {
    vars.Add(\\"myVar\\", js.executeScript(\\"return 'b'\\"));
    if ((Boolean) js.executeScript(\\"return (arguments[0] === 'a')\\", vars[\\"myVar\\"])) {
      vars.Add(\\"output\\", js.executeScript(\\"return 'a'\\"));
    } else if ((Boolean) js.executeScript(\\"return (arguments[0] === 'b')\\", vars[\\"myVar\\"])) {
      vars.Add(\\"output\\", js.executeScript(\\"return 'b'\\"));
    } else {
      vars.Add(\\"output\\", js.executeScript(\\"return 'c'\\"));
    }
    Assert.That(vars[\\"output\\"].ToString(), Is.EqualTo(\\"b\\"));
  }
  [Test]
  public void controlflowelse() {
    vars.Add(\\"myVar\\", js.executeScript(\\"return 'c'\\"));
    if ((Boolean) js.executeScript(\\"return (arguments[0] === 'a')\\", vars[\\"myVar\\"])) {
      vars.Add(\\"output\\", js.executeScript(\\"return 'a'\\"));
    } else if ((Boolean) js.executeScript(\\"return (arguments[0] === 'b')\\", vars[\\"myVar\\"])) {
      vars.Add(\\"output\\", js.executeScript(\\"return 'b'\\"));
    } else {
      vars.Add(\\"output\\", js.executeScript(\\"return 'c'\\"));
    }
    Assert.That(vars[\\"output\\"].ToString(), Is.EqualTo(\\"c\\"));
  }
  [Test]
  public void controlflowdo() {
    vars.Add(\\"check\\", js.executeScript(\\"return 1\\"));
    do {
      vars.Add(\\"check\\", js.executeScript(\\"return arguments[0] + 1\\", vars[\\"check\\"]));
    } while ((Boolean) js.executeScript(\\"return (arguments[0] < 3)\\", vars[\\"check\\"]));
    Assert.That(vars[\\"check\\"].ToString(), Is.EqualTo(\\"3\\"));
  }
  [Test]
  public void controlflowtimes() {
    vars.Add(\\"check\\", js.executeScript(\\"return 1\\"));
    Integer times = 2;
    for(int i = 0; i < times; i++) {
      vars.Add(\\"check\\", js.executeScript(\\"return arguments[0] + 1\\", vars[\\"check\\"]));
    }
    Assert.That(vars[\\"check\\"].ToString(), Is.EqualTo(\\"3\\"));
  }
  [Test]
  public void controlflowwhile() {
    vars.Add(\\"check\\", js.executeScript(\\"return 1\\"));
    while ((Boolean) js.executeScript(\\"return (arguments[0] < 3)\\", vars[\\"check\\"])) {
      vars.Add(\\"check\\", js.executeScript(\\"return arguments[0] + 1\\", vars[\\"check\\"]));
    }
    Assert.That(vars[\\"check\\"].ToString(), Is.EqualTo(\\"3\\"));
  }
}
"
`;

exports[`Code Export Java JUnit Selenium should export a suite with a reused test method 1`] = `
"// Generated by Selenium IDE
using System;
using System.Collections;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using NUnit.Framework;
[TestFixture]
public class LoginTest {
  private IWebDriver Driver;
  private Hashtable vars;
  private IJavaScriptExecutor js;
  [SetUp]
  public void SetUp() {
    this.Driver = new ChromeDriver();
    this.js = (IJavaScriptExecutor)Driver;
    this.vars = new Hashtable();
  }
  [TearDown]
  protected void TearDown() {
    Driver.Quit();
  }
  public void login() {
    Driver.Navigate().GoToUrl(\\"https://the-internet.herokuapp.com/\\");
    Driver.FindElement(By.LinkText(\\"Form Authentication\\")).Click();
    Driver.FindElement(By.Id(\\"username\\")).SendKeys(vars[\\"username\\"].ToString());
    Driver.FindElement(By.Id(\\"password\\")).SendKeys(vars[\\"password\\"].ToString());
    Driver.FindElement(By.CssSelector(\\".fa\\")).Click();
  }
  [Test]
  public void invalidcredentials() {
    vars.Add(\\"username\\", \\"blah\\");
    vars.Add(\\"password\\", \\"blah\\");
    login();
  }
  [Test]
  public void validcredentials() {
    vars.Add(\\"username\\", \\"tomsmith\\");
    vars.Add(\\"password\\", \\"SuperSecretPassword!\\");
    login();
  }
}
"
`;

exports[`Code Export Java JUnit Selenium should export a suite with commands that open a new window inside of a reused test method 1`] = `
"// Generated by Selenium IDE
using System;
using System.Collections;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using NUnit.Framework;
[TestFixture]
public class DefaultSuiteTest {
  private IWebDriver Driver;
  private Hashtable vars;
  private IJavaScriptExecutor js;
  [SetUp]
  public void SetUp() {
    this.Driver = new ChromeDriver();
    this.js = (IJavaScriptExecutor)Driver;
    this.vars = new Hashtable();
  }
  [TearDown]
  protected void TearDown() {
    Driver.Quit();
  }
  public String waitForWindow(int timeout) {
    try {
      Thread.Sleep(timeout);
    } catch(Exception e) {
      Console.WriteLine(\\"{0} Exception caught.\\", e);
    }
    var whNow = Driver.WindowHandles;
    var whThen = vars[\\"WindowHandles\\"];
    if (whNow.Count > whThen.Count) {
      whNow.removeAll(whThen);
    }
    return whNow.GetEnumerator().MoveNext();
  }
  public void selectwindow() {
    Driver.Navigate().GoToUrl(\\"http://the-internet.herokuapp.com/windows\\");
    vars.Add(\\"WindowHandles\\", Driver.WindowHandles);
    Driver.FindElement(By.LinkText(\\"Click Here\\")).Click();
    vars.Add(\\"win9425\\", waitForWindow(2000));
    Driver.SwitchTo().Window(vars[\\"win9425\\"].ToString());
    Assert.That(Driver.Title, Is.EqualTo(\\"New Window\\"));
  }
  [Test]
  public void reuse() {
    selectwindow();
  }
}
"
`;

exports[`Code Export Java JUnit Selenium should export a suite with just one new window util method when there are multiple commands that open a new window 1`] = `
"// Generated by Selenium IDE
using System;
using System.Collections;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using NUnit.Framework;
[TestFixture]
public class DefaultSuiteTest {
  private IWebDriver Driver;
  private Hashtable vars;
  private IJavaScriptExecutor js;
  [SetUp]
  public void SetUp() {
    this.Driver = new ChromeDriver();
    this.js = (IJavaScriptExecutor)Driver;
    this.vars = new Hashtable();
  }
  [TearDown]
  protected void TearDown() {
    Driver.Quit();
  }
  public String waitForWindow(int timeout) {
    try {
      Thread.Sleep(timeout);
    } catch(Exception e) {
      Console.WriteLine(\\"{0} Exception caught.\\", e);
    }
    var whNow = Driver.WindowHandles;
    var whThen = vars[\\"WindowHandles\\"];
    if (whNow.Count > whThen.Count) {
      whNow.removeAll(whThen);
    }
    return whNow.GetEnumerator().MoveNext();
  }
  public void selectwindow() {
    Driver.Navigate().GoToUrl(\\"http://the-internet.herokuapp.com/windows\\");
    vars.Add(\\"WindowHandles\\", Driver.WindowHandles);
    Driver.FindElement(By.LinkText(\\"Click Here\\")).Click();
    vars.Add(\\"win9425\\", waitForWindow(2000));
    Driver.SwitchTo().Window(vars[\\"win9425\\"].ToString());
    Assert.That(Driver.Title, Is.EqualTo(\\"New Window\\"));
  }
  [Test]
  public void reuse() {
    selectwindow();
  }
  [Test]
  public void selectwindow() {
    Driver.Navigate().GoToUrl(\\"http://the-internet.herokuapp.com/windows\\");
    vars.Add(\\"WindowHandles\\", Driver.WindowHandles);
    Driver.FindElement(By.LinkText(\\"Click Here\\")).Click();
    vars.Add(\\"win9425\\", waitForWindow(2000));
    Driver.SwitchTo().Window(vars[\\"win9425\\"].ToString());
    Assert.That(Driver.Title, Is.EqualTo(\\"New Window\\"));
  }
}
"
`;

exports[`Code Export Java JUnit Selenium should export a test 1`] = `
"// Generated by Selenium IDE
using System;
using System.Collections;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using NUnit.Framework;
[TestFixture]
public class LoginTest {
  private IWebDriver Driver;
  private Hashtable vars;
  private IJavaScriptExecutor js;
  [SetUp]
  public void SetUp() {
    this.Driver = new ChromeDriver();
    this.js = (IJavaScriptExecutor)Driver;
    this.vars = new Hashtable();
  }
  [TearDown]
  protected void TearDown() {
    Driver.Quit();
  }
  [Test]
  public void login() {
    Driver.Navigate().GoToUrl(\\"http://the-internet.herokuapp.com/login\\");
    Driver.Manage().Window.Size = new System.Drawing.Size(1440, 1177);
    Driver.FindElement(By.Id(\\"username\\")).SendKeys(\\"tomsmith\\");
    Driver.FindElement(By.Id(\\"password\\")).SendKeys(\\"SuperSecretPassword!\\");
    Driver.FindElement(By.CssSelector(\\"#login button\\")).Click();
    Assert.That(Driver.FindElement(By.CssSelector(\\".flash.success\\")).Text, Is.EqualTo(\\"You logged into a secure area!\\\\\\\\\\\\\\\\n×\\"));
  }
}
"
`;

exports[`Code Export Java JUnit Selenium should export a test with a reused test method 1`] = `
"// Generated by Selenium IDE
using System;
using System.Collections;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using NUnit.Framework;
[TestFixture]
public class ValidcredentialsTest {
  private IWebDriver Driver;
  private Hashtable vars;
  private IJavaScriptExecutor js;
  [SetUp]
  public void SetUp() {
    this.Driver = new ChromeDriver();
    this.js = (IJavaScriptExecutor)Driver;
    this.vars = new Hashtable();
  }
  [TearDown]
  protected void TearDown() {
    Driver.Quit();
  }
  public void login() {
    Driver.Navigate().GoToUrl(\\"https://the-internet.herokuapp.com/\\");
    Driver.FindElement(By.LinkText(\\"Form Authentication\\")).Click();
    Driver.FindElement(By.Id(\\"username\\")).SendKeys(vars[\\"username\\"].ToString());
    Driver.FindElement(By.Id(\\"password\\")).SendKeys(vars[\\"password\\"].ToString());
    Driver.FindElement(By.CssSelector(\\".fa\\")).Click();
  }
  [Test]
  public void validcredentials() {
    vars.Add(\\"username\\", \\"tomsmith\\");
    vars.Add(\\"password\\", \\"SuperSecretPassword!\\");
    login();
  }
}
"
`;

exports[`Code Export Java JUnit Selenium should export a test with commands that open a new window 1`] = `
"// Generated by Selenium IDE
using System;
using System.Collections;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium.Interactions;
using NUnit.Framework;
[TestFixture]
public class SelectwindowTest {
  private IWebDriver Driver;
  private Hashtable vars;
  private IJavaScriptExecutor js;
  [SetUp]
  public void SetUp() {
    this.Driver = new ChromeDriver();
    this.js = (IJavaScriptExecutor)Driver;
    this.vars = new Hashtable();
  }
  [TearDown]
  protected void TearDown() {
    Driver.Quit();
  }
  public String waitForWindow(int timeout) {
    try {
      Thread.Sleep(timeout);
    } catch(Exception e) {
      Console.WriteLine(\\"{0} Exception caught.\\", e);
    }
    var whNow = Driver.WindowHandles;
    var whThen = vars[\\"WindowHandles\\"];
    if (whNow.Count > whThen.Count) {
      whNow.removeAll(whThen);
    }
    return whNow.GetEnumerator().MoveNext();
  }
  [Test]
  public void selectwindow() {
    Driver.Navigate().GoToUrl(\\"http://the-internet.herokuapp.com/\\");
    Driver.Manage().Window.Size = new System.Drawing.Size(1260, 1027);
    Driver.FindElement(By.LinkText(\\"Multiple Windows\\")).Click();
    vars.Add(\\"WindowHandles\\", Driver.WindowHandles);
    Driver.FindElement(By.LinkText(\\"Click Here\\")).Click();
    vars.Add(\\"win9625\\", waitForWindow(2000));
    vars.Add(\\"root\\", Driver.CurrentWindowHandle);
    Driver.SwitchTo().Window(vars[\\"win9625\\"].ToString());
    Assert.That(Driver.Title, Is.EqualTo(\\"New Window\\"));
    Driver.SwitchTo().Window(vars[\\"root\\"].ToString());
    Assert.That(Driver.Title, Is.EqualTo(\\"The Internet\\"));
  }
}
"
`;
